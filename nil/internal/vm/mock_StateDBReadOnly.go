// Code generated by mockery v2.53.3. DO NOT EDIT.

//go:build test

package vm

import (
	types "github.com/NilFoundation/nil/nil/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockStateDBReadOnly is an autogenerated mock type for the StateDBReadOnly type
type MockStateDBReadOnly struct {
	mock.Mock
}

type MockStateDBReadOnly_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateDBReadOnly) EXPECT() *MockStateDBReadOnly_Expecter {
	return &MockStateDBReadOnly_Expecter{mock: &_m.Mock}
}

// GetGasPrice provides a mock function with given fields: _a0
func (_m *MockStateDBReadOnly) GetGasPrice(_a0 types.ShardId) (types.Value, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGasPrice")
	}

	var r0 types.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ShardId) (types.Value, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.ShardId) types.Value); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.Value)
	}

	if rf, ok := ret.Get(1).(func(types.ShardId) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateDBReadOnly_GetGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasPrice'
type MockStateDBReadOnly_GetGasPrice_Call struct {
	*mock.Call
}

// GetGasPrice is a helper method to define mock.On call
//   - _a0 types.ShardId
func (_e *MockStateDBReadOnly_Expecter) GetGasPrice(_a0 interface{}) *MockStateDBReadOnly_GetGasPrice_Call {
	return &MockStateDBReadOnly_GetGasPrice_Call{Call: _e.mock.On("GetGasPrice", _a0)}
}

func (_c *MockStateDBReadOnly_GetGasPrice_Call) Run(run func(_a0 types.ShardId)) *MockStateDBReadOnly_GetGasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ShardId))
	})
	return _c
}

func (_c *MockStateDBReadOnly_GetGasPrice_Call) Return(_a0 types.Value, _a1 error) *MockStateDBReadOnly_GetGasPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateDBReadOnly_GetGasPrice_Call) RunAndReturn(run func(types.ShardId) (types.Value, error)) *MockStateDBReadOnly_GetGasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokens provides a mock function with given fields: _a0
func (_m *MockStateDBReadOnly) GetTokens(_a0 types.Address) map[types.TokenId]types.Value {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTokens")
	}

	var r0 map[types.TokenId]types.Value
	if rf, ok := ret.Get(0).(func(types.Address) map[types.TokenId]types.Value); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.TokenId]types.Value)
		}
	}

	return r0
}

// MockStateDBReadOnly_GetTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokens'
type MockStateDBReadOnly_GetTokens_Call struct {
	*mock.Call
}

// GetTokens is a helper method to define mock.On call
//   - _a0 types.Address
func (_e *MockStateDBReadOnly_Expecter) GetTokens(_a0 interface{}) *MockStateDBReadOnly_GetTokens_Call {
	return &MockStateDBReadOnly_GetTokens_Call{Call: _e.mock.On("GetTokens", _a0)}
}

func (_c *MockStateDBReadOnly_GetTokens_Call) Run(run func(_a0 types.Address)) *MockStateDBReadOnly_GetTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Address))
	})
	return _c
}

func (_c *MockStateDBReadOnly_GetTokens_Call) Return(_a0 map[types.TokenId]types.Value) *MockStateDBReadOnly_GetTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateDBReadOnly_GetTokens_Call) RunAndReturn(run func(types.Address) map[types.TokenId]types.Value) *MockStateDBReadOnly_GetTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionFlags provides a mock function with no fields
func (_m *MockStateDBReadOnly) GetTransactionFlags() types.TransactionFlags {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionFlags")
	}

	var r0 types.TransactionFlags
	if rf, ok := ret.Get(0).(func() types.TransactionFlags); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.TransactionFlags)
	}

	return r0
}

// MockStateDBReadOnly_GetTransactionFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionFlags'
type MockStateDBReadOnly_GetTransactionFlags_Call struct {
	*mock.Call
}

// GetTransactionFlags is a helper method to define mock.On call
func (_e *MockStateDBReadOnly_Expecter) GetTransactionFlags() *MockStateDBReadOnly_GetTransactionFlags_Call {
	return &MockStateDBReadOnly_GetTransactionFlags_Call{Call: _e.mock.On("GetTransactionFlags")}
}

func (_c *MockStateDBReadOnly_GetTransactionFlags_Call) Run(run func()) *MockStateDBReadOnly_GetTransactionFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateDBReadOnly_GetTransactionFlags_Call) Return(_a0 types.TransactionFlags) *MockStateDBReadOnly_GetTransactionFlags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateDBReadOnly_GetTransactionFlags_Call) RunAndReturn(run func() types.TransactionFlags) *MockStateDBReadOnly_GetTransactionFlags_Call {
	_c.Call.Return(run)
	return _c
}

// IsInternalTransaction provides a mock function with no fields
func (_m *MockStateDBReadOnly) IsInternalTransaction() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInternalTransaction")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockStateDBReadOnly_IsInternalTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInternalTransaction'
type MockStateDBReadOnly_IsInternalTransaction_Call struct {
	*mock.Call
}

// IsInternalTransaction is a helper method to define mock.On call
func (_e *MockStateDBReadOnly_Expecter) IsInternalTransaction() *MockStateDBReadOnly_IsInternalTransaction_Call {
	return &MockStateDBReadOnly_IsInternalTransaction_Call{Call: _e.mock.On("IsInternalTransaction")}
}

func (_c *MockStateDBReadOnly_IsInternalTransaction_Call) Run(run func()) *MockStateDBReadOnly_IsInternalTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateDBReadOnly_IsInternalTransaction_Call) Return(_a0 bool) *MockStateDBReadOnly_IsInternalTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateDBReadOnly_IsInternalTransaction_Call) RunAndReturn(run func() bool) *MockStateDBReadOnly_IsInternalTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateDBReadOnly creates a new instance of MockStateDBReadOnly. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateDBReadOnly(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateDBReadOnly {
	mock := &MockStateDBReadOnly{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
