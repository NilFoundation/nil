// Code generated by mockery v2.53.3. DO NOT EDIT.

//go:build test

package db

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockDB) Close() {
	_m.Called()
}

// MockDB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDB_Expecter) Close() *MockDB_Close_Call {
	return &MockDB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDB_Close_Call) Run(run func()) *MockDB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_Close_Call) Return() *MockDB_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDB_Close_Call) RunAndReturn(run func()) *MockDB_Close_Call {
	_c.Run(run)
	return _c
}

// CreateRoTx provides a mock function with given fields: ctx
func (_m *MockDB) CreateRoTx(ctx context.Context) (RoTx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoTx")
	}

	var r0 RoTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (RoTx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) RoTx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RoTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_CreateRoTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoTx'
type MockDB_CreateRoTx_Call struct {
	*mock.Call
}

// CreateRoTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDB_Expecter) CreateRoTx(ctx interface{}) *MockDB_CreateRoTx_Call {
	return &MockDB_CreateRoTx_Call{Call: _e.mock.On("CreateRoTx", ctx)}
}

func (_c *MockDB_CreateRoTx_Call) Run(run func(ctx context.Context)) *MockDB_CreateRoTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDB_CreateRoTx_Call) Return(_a0 RoTx, _a1 error) *MockDB_CreateRoTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_CreateRoTx_Call) RunAndReturn(run func(context.Context) (RoTx, error)) *MockDB_CreateRoTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoTxAt provides a mock function with given fields: ctx, ts
func (_m *MockDB) CreateRoTxAt(ctx context.Context, ts Timestamp) (RoTx, error) {
	ret := _m.Called(ctx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoTxAt")
	}

	var r0 RoTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Timestamp) (RoTx, error)); ok {
		return rf(ctx, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Timestamp) RoTx); ok {
		r0 = rf(ctx, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RoTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Timestamp) error); ok {
		r1 = rf(ctx, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_CreateRoTxAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoTxAt'
type MockDB_CreateRoTxAt_Call struct {
	*mock.Call
}

// CreateRoTxAt is a helper method to define mock.On call
//   - ctx context.Context
//   - ts Timestamp
func (_e *MockDB_Expecter) CreateRoTxAt(ctx interface{}, ts interface{}) *MockDB_CreateRoTxAt_Call {
	return &MockDB_CreateRoTxAt_Call{Call: _e.mock.On("CreateRoTxAt", ctx, ts)}
}

func (_c *MockDB_CreateRoTxAt_Call) Run(run func(ctx context.Context, ts Timestamp)) *MockDB_CreateRoTxAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Timestamp))
	})
	return _c
}

func (_c *MockDB_CreateRoTxAt_Call) Return(_a0 RoTx, _a1 error) *MockDB_CreateRoTxAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_CreateRoTxAt_Call) RunAndReturn(run func(context.Context, Timestamp) (RoTx, error)) *MockDB_CreateRoTxAt_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRwTx provides a mock function with given fields: ctx
func (_m *MockDB) CreateRwTx(ctx context.Context) (RwTx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateRwTx")
	}

	var r0 RwTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (RwTx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) RwTx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RwTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_CreateRwTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRwTx'
type MockDB_CreateRwTx_Call struct {
	*mock.Call
}

// CreateRwTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDB_Expecter) CreateRwTx(ctx interface{}) *MockDB_CreateRwTx_Call {
	return &MockDB_CreateRwTx_Call{Call: _e.mock.On("CreateRwTx", ctx)}
}

func (_c *MockDB_CreateRwTx_Call) Run(run func(ctx context.Context)) *MockDB_CreateRwTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDB_CreateRwTx_Call) Return(_a0 RwTx, _a1 error) *MockDB_CreateRwTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_CreateRwTx_Call) RunAndReturn(run func(context.Context) (RwTx, error)) *MockDB_CreateRwTx_Call {
	_c.Call.Return(run)
	return _c
}

// DropAll provides a mock function with no fields
func (_m *MockDB) DropAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DropAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_DropAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAll'
type MockDB_DropAll_Call struct {
	*mock.Call
}

// DropAll is a helper method to define mock.On call
func (_e *MockDB_Expecter) DropAll() *MockDB_DropAll_Call {
	return &MockDB_DropAll_Call{Call: _e.mock.On("DropAll")}
}

func (_c *MockDB_DropAll_Call) Run(run func()) *MockDB_DropAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_DropAll_Call) Return(_a0 error) *MockDB_DropAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_DropAll_Call) RunAndReturn(run func() error) *MockDB_DropAll_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: _a0, reader
func (_m *MockDB) Fetch(_a0 context.Context, reader io.Reader) error {
	ret := _m.Called(_a0, reader)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) error); ok {
		r0 = rf(_a0, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockDB_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - _a0 context.Context
//   - reader io.Reader
func (_e *MockDB_Expecter) Fetch(_a0 interface{}, reader interface{}) *MockDB_Fetch_Call {
	return &MockDB_Fetch_Call{Call: _e.mock.On("Fetch", _a0, reader)}
}

func (_c *MockDB_Fetch_Call) Run(run func(_a0 context.Context, reader io.Reader)) *MockDB_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockDB_Fetch_Call) Return(_a0 error) *MockDB_Fetch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_Fetch_Call) RunAndReturn(run func(context.Context, io.Reader) error) *MockDB_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetSequence provides a mock function with given fields: ctx, key, bandwidth
func (_m *MockDB) GetSequence(ctx context.Context, key []byte, bandwidth uint64) (Sequence, error) {
	ret := _m.Called(ctx, key, bandwidth)

	if len(ret) == 0 {
		panic("no return value specified for GetSequence")
	}

	var r0 Sequence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, uint64) (Sequence, error)); ok {
		return rf(ctx, key, bandwidth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, uint64) Sequence); ok {
		r0 = rf(ctx, key, bandwidth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Sequence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, uint64) error); ok {
		r1 = rf(ctx, key, bandwidth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequence'
type MockDB_GetSequence_Call struct {
	*mock.Call
}

// GetSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
//   - bandwidth uint64
func (_e *MockDB_Expecter) GetSequence(ctx interface{}, key interface{}, bandwidth interface{}) *MockDB_GetSequence_Call {
	return &MockDB_GetSequence_Call{Call: _e.mock.On("GetSequence", ctx, key, bandwidth)}
}

func (_c *MockDB_GetSequence_Call) Run(run func(ctx context.Context, key []byte, bandwidth uint64)) *MockDB_GetSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(uint64))
	})
	return _c
}

func (_c *MockDB_GetSequence_Call) Return(_a0 Sequence, _a1 error) *MockDB_GetSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetSequence_Call) RunAndReturn(run func(context.Context, []byte, uint64) (Sequence, error)) *MockDB_GetSequence_Call {
	_c.Call.Return(run)
	return _c
}

// LogGC provides a mock function with given fields: ctx, discardRation, gcFrequency
func (_m *MockDB) LogGC(ctx context.Context, discardRation float64, gcFrequency time.Duration) error {
	ret := _m.Called(ctx, discardRation, gcFrequency)

	if len(ret) == 0 {
		panic("no return value specified for LogGC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, time.Duration) error); ok {
		r0 = rf(ctx, discardRation, gcFrequency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_LogGC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogGC'
type MockDB_LogGC_Call struct {
	*mock.Call
}

// LogGC is a helper method to define mock.On call
//   - ctx context.Context
//   - discardRation float64
//   - gcFrequency time.Duration
func (_e *MockDB_Expecter) LogGC(ctx interface{}, discardRation interface{}, gcFrequency interface{}) *MockDB_LogGC_Call {
	return &MockDB_LogGC_Call{Call: _e.mock.On("LogGC", ctx, discardRation, gcFrequency)}
}

func (_c *MockDB_LogGC_Call) Run(run func(ctx context.Context, discardRation float64, gcFrequency time.Duration)) *MockDB_LogGC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockDB_LogGC_Call) Return(_a0 error) *MockDB_LogGC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_LogGC_Call) RunAndReturn(run func(context.Context, float64, time.Duration) error) *MockDB_LogGC_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, keyFilter, writer
func (_m *MockDB) Stream(ctx context.Context, keyFilter func([]byte) bool, writer io.Writer) error {
	ret := _m.Called(ctx, keyFilter, writer)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func([]byte) bool, io.Writer) error); ok {
		r0 = rf(ctx, keyFilter, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type MockDB_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - keyFilter func([]byte) bool
//   - writer io.Writer
func (_e *MockDB_Expecter) Stream(ctx interface{}, keyFilter interface{}, writer interface{}) *MockDB_Stream_Call {
	return &MockDB_Stream_Call{Call: _e.mock.On("Stream", ctx, keyFilter, writer)}
}

func (_c *MockDB_Stream_Call) Run(run func(ctx context.Context, keyFilter func([]byte) bool, writer io.Writer)) *MockDB_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func([]byte) bool), args[2].(io.Writer))
	})
	return _c
}

func (_c *MockDB_Stream_Call) Return(_a0 error) *MockDB_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_Stream_Call) RunAndReturn(run func(context.Context, func([]byte) bool, io.Writer) error) *MockDB_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
