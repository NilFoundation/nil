// Code generated by mockery v2.53.3. DO NOT EDIT.

//go:build test

package db

import (
	types "github.com/NilFoundation/nil/nil/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockRwTx is an autogenerated mock type for the RwTx type
type MockRwTx struct {
	mock.Mock
}

type MockRwTx_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRwTx) EXPECT() *MockRwTx_Expecter {
	return &MockRwTx_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with no fields
func (_m *MockRwTx) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRwTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockRwTx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockRwTx_Expecter) Commit() *MockRwTx_Commit_Call {
	return &MockRwTx_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockRwTx_Commit_Call) Run(run func()) *MockRwTx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRwTx_Commit_Call) Return(_a0 error) *MockRwTx_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRwTx_Commit_Call) RunAndReturn(run func() error) *MockRwTx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CommitWithTs provides a mock function with no fields
func (_m *MockRwTx) CommitWithTs() (Timestamp, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommitWithTs")
	}

	var r0 Timestamp
	var r1 error
	if rf, ok := ret.Get(0).(func() (Timestamp, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Timestamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Timestamp)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_CommitWithTs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitWithTs'
type MockRwTx_CommitWithTs_Call struct {
	*mock.Call
}

// CommitWithTs is a helper method to define mock.On call
func (_e *MockRwTx_Expecter) CommitWithTs() *MockRwTx_CommitWithTs_Call {
	return &MockRwTx_CommitWithTs_Call{Call: _e.mock.On("CommitWithTs")}
}

func (_c *MockRwTx_CommitWithTs_Call) Run(run func()) *MockRwTx_CommitWithTs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRwTx_CommitWithTs_Call) Return(_a0 Timestamp, _a1 error) *MockRwTx_CommitWithTs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_CommitWithTs_Call) RunAndReturn(run func() (Timestamp, error)) *MockRwTx_CommitWithTs_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tableName, key
func (_m *MockRwTx) Delete(tableName TableName, key []byte) error {
	ret := _m.Called(tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(TableName, []byte) error); ok {
		r0 = rf(tableName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRwTx_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRwTx_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tableName TableName
//   - key []byte
func (_e *MockRwTx_Expecter) Delete(tableName interface{}, key interface{}) *MockRwTx_Delete_Call {
	return &MockRwTx_Delete_Call{Call: _e.mock.On("Delete", tableName, key)}
}

func (_c *MockRwTx_Delete_Call) Run(run func(tableName TableName, key []byte)) *MockRwTx_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TableName), args[1].([]byte))
	})
	return _c
}

func (_c *MockRwTx_Delete_Call) Return(_a0 error) *MockRwTx_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRwTx_Delete_Call) RunAndReturn(run func(TableName, []byte) error) *MockRwTx_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFromShard provides a mock function with given fields: shardId, tableName, key
func (_m *MockRwTx) DeleteFromShard(shardId types.ShardId, tableName ShardedTableName, key []byte) error {
	ret := _m.Called(shardId, tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFromShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte) error); ok {
		r0 = rf(shardId, tableName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRwTx_DeleteFromShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFromShard'
type MockRwTx_DeleteFromShard_Call struct {
	*mock.Call
}

// DeleteFromShard is a helper method to define mock.On call
//   - shardId types.ShardId
//   - tableName ShardedTableName
//   - key []byte
func (_e *MockRwTx_Expecter) DeleteFromShard(shardId interface{}, tableName interface{}, key interface{}) *MockRwTx_DeleteFromShard_Call {
	return &MockRwTx_DeleteFromShard_Call{Call: _e.mock.On("DeleteFromShard", shardId, tableName, key)}
}

func (_c *MockRwTx_DeleteFromShard_Call) Run(run func(shardId types.ShardId, tableName ShardedTableName, key []byte)) *MockRwTx_DeleteFromShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ShardId), args[1].(ShardedTableName), args[2].([]byte))
	})
	return _c
}

func (_c *MockRwTx_DeleteFromShard_Call) Return(_a0 error) *MockRwTx_DeleteFromShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRwTx_DeleteFromShard_Call) RunAndReturn(run func(types.ShardId, ShardedTableName, []byte) error) *MockRwTx_DeleteFromShard_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: tableName, key
func (_m *MockRwTx) Exists(tableName TableName, key []byte) (bool, error) {
	ret := _m.Called(tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(TableName, []byte) (bool, error)); ok {
		return rf(tableName, key)
	}
	if rf, ok := ret.Get(0).(func(TableName, []byte) bool); ok {
		r0 = rf(tableName, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(TableName, []byte) error); ok {
		r1 = rf(tableName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRwTx_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - tableName TableName
//   - key []byte
func (_e *MockRwTx_Expecter) Exists(tableName interface{}, key interface{}) *MockRwTx_Exists_Call {
	return &MockRwTx_Exists_Call{Call: _e.mock.On("Exists", tableName, key)}
}

func (_c *MockRwTx_Exists_Call) Run(run func(tableName TableName, key []byte)) *MockRwTx_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TableName), args[1].([]byte))
	})
	return _c
}

func (_c *MockRwTx_Exists_Call) Return(_a0 bool, _a1 error) *MockRwTx_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_Exists_Call) RunAndReturn(run func(TableName, []byte) (bool, error)) *MockRwTx_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsInShard provides a mock function with given fields: shardId, tableName, key
func (_m *MockRwTx) ExistsInShard(shardId types.ShardId, tableName ShardedTableName, key []byte) (bool, error) {
	ret := _m.Called(shardId, tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for ExistsInShard")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte) (bool, error)); ok {
		return rf(shardId, tableName, key)
	}
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte) bool); ok {
		r0 = rf(shardId, tableName, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.ShardId, ShardedTableName, []byte) error); ok {
		r1 = rf(shardId, tableName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_ExistsInShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsInShard'
type MockRwTx_ExistsInShard_Call struct {
	*mock.Call
}

// ExistsInShard is a helper method to define mock.On call
//   - shardId types.ShardId
//   - tableName ShardedTableName
//   - key []byte
func (_e *MockRwTx_Expecter) ExistsInShard(shardId interface{}, tableName interface{}, key interface{}) *MockRwTx_ExistsInShard_Call {
	return &MockRwTx_ExistsInShard_Call{Call: _e.mock.On("ExistsInShard", shardId, tableName, key)}
}

func (_c *MockRwTx_ExistsInShard_Call) Run(run func(shardId types.ShardId, tableName ShardedTableName, key []byte)) *MockRwTx_ExistsInShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ShardId), args[1].(ShardedTableName), args[2].([]byte))
	})
	return _c
}

func (_c *MockRwTx_ExistsInShard_Call) Return(_a0 bool, _a1 error) *MockRwTx_ExistsInShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_ExistsInShard_Call) RunAndReturn(run func(types.ShardId, ShardedTableName, []byte) (bool, error)) *MockRwTx_ExistsInShard_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: tableName, key
func (_m *MockRwTx) Get(tableName TableName, key []byte) ([]byte, error) {
	ret := _m.Called(tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(TableName, []byte) ([]byte, error)); ok {
		return rf(tableName, key)
	}
	if rf, ok := ret.Get(0).(func(TableName, []byte) []byte); ok {
		r0 = rf(tableName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(TableName, []byte) error); ok {
		r1 = rf(tableName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRwTx_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - tableName TableName
//   - key []byte
func (_e *MockRwTx_Expecter) Get(tableName interface{}, key interface{}) *MockRwTx_Get_Call {
	return &MockRwTx_Get_Call{Call: _e.mock.On("Get", tableName, key)}
}

func (_c *MockRwTx_Get_Call) Run(run func(tableName TableName, key []byte)) *MockRwTx_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TableName), args[1].([]byte))
	})
	return _c
}

func (_c *MockRwTx_Get_Call) Return(_a0 []byte, _a1 error) *MockRwTx_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_Get_Call) RunAndReturn(run func(TableName, []byte) ([]byte, error)) *MockRwTx_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetFromShard provides a mock function with given fields: shardId, tableName, key
func (_m *MockRwTx) GetFromShard(shardId types.ShardId, tableName ShardedTableName, key []byte) ([]byte, error) {
	ret := _m.Called(shardId, tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for GetFromShard")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte) ([]byte, error)); ok {
		return rf(shardId, tableName, key)
	}
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte) []byte); ok {
		r0 = rf(shardId, tableName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ShardId, ShardedTableName, []byte) error); ok {
		r1 = rf(shardId, tableName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_GetFromShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFromShard'
type MockRwTx_GetFromShard_Call struct {
	*mock.Call
}

// GetFromShard is a helper method to define mock.On call
//   - shardId types.ShardId
//   - tableName ShardedTableName
//   - key []byte
func (_e *MockRwTx_Expecter) GetFromShard(shardId interface{}, tableName interface{}, key interface{}) *MockRwTx_GetFromShard_Call {
	return &MockRwTx_GetFromShard_Call{Call: _e.mock.On("GetFromShard", shardId, tableName, key)}
}

func (_c *MockRwTx_GetFromShard_Call) Run(run func(shardId types.ShardId, tableName ShardedTableName, key []byte)) *MockRwTx_GetFromShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ShardId), args[1].(ShardedTableName), args[2].([]byte))
	})
	return _c
}

func (_c *MockRwTx_GetFromShard_Call) Return(_a0 []byte, _a1 error) *MockRwTx_GetFromShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_GetFromShard_Call) RunAndReturn(run func(types.ShardId, ShardedTableName, []byte) ([]byte, error)) *MockRwTx_GetFromShard_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: tableName, key, value
func (_m *MockRwTx) Put(tableName TableName, key []byte, value []byte) error {
	ret := _m.Called(tableName, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(TableName, []byte, []byte) error); ok {
		r0 = rf(tableName, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRwTx_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockRwTx_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - tableName TableName
//   - key []byte
//   - value []byte
func (_e *MockRwTx_Expecter) Put(tableName interface{}, key interface{}, value interface{}) *MockRwTx_Put_Call {
	return &MockRwTx_Put_Call{Call: _e.mock.On("Put", tableName, key, value)}
}

func (_c *MockRwTx_Put_Call) Run(run func(tableName TableName, key []byte, value []byte)) *MockRwTx_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TableName), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockRwTx_Put_Call) Return(_a0 error) *MockRwTx_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRwTx_Put_Call) RunAndReturn(run func(TableName, []byte, []byte) error) *MockRwTx_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutToShard provides a mock function with given fields: shardId, tableName, key, value
func (_m *MockRwTx) PutToShard(shardId types.ShardId, tableName ShardedTableName, key []byte, value []byte) error {
	ret := _m.Called(shardId, tableName, key, value)

	if len(ret) == 0 {
		panic("no return value specified for PutToShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte, []byte) error); ok {
		r0 = rf(shardId, tableName, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRwTx_PutToShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutToShard'
type MockRwTx_PutToShard_Call struct {
	*mock.Call
}

// PutToShard is a helper method to define mock.On call
//   - shardId types.ShardId
//   - tableName ShardedTableName
//   - key []byte
//   - value []byte
func (_e *MockRwTx_Expecter) PutToShard(shardId interface{}, tableName interface{}, key interface{}, value interface{}) *MockRwTx_PutToShard_Call {
	return &MockRwTx_PutToShard_Call{Call: _e.mock.On("PutToShard", shardId, tableName, key, value)}
}

func (_c *MockRwTx_PutToShard_Call) Run(run func(shardId types.ShardId, tableName ShardedTableName, key []byte, value []byte)) *MockRwTx_PutToShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ShardId), args[1].(ShardedTableName), args[2].([]byte), args[3].([]byte))
	})
	return _c
}

func (_c *MockRwTx_PutToShard_Call) Return(_a0 error) *MockRwTx_PutToShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRwTx_PutToShard_Call) RunAndReturn(run func(types.ShardId, ShardedTableName, []byte, []byte) error) *MockRwTx_PutToShard_Call {
	_c.Call.Return(run)
	return _c
}

// Range provides a mock function with given fields: tableName, from, to
func (_m *MockRwTx) Range(tableName TableName, from []byte, to []byte) (Iter, error) {
	ret := _m.Called(tableName, from, to)

	if len(ret) == 0 {
		panic("no return value specified for Range")
	}

	var r0 Iter
	var r1 error
	if rf, ok := ret.Get(0).(func(TableName, []byte, []byte) (Iter, error)); ok {
		return rf(tableName, from, to)
	}
	if rf, ok := ret.Get(0).(func(TableName, []byte, []byte) Iter); ok {
		r0 = rf(tableName, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Iter)
		}
	}

	if rf, ok := ret.Get(1).(func(TableName, []byte, []byte) error); ok {
		r1 = rf(tableName, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_Range_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Range'
type MockRwTx_Range_Call struct {
	*mock.Call
}

// Range is a helper method to define mock.On call
//   - tableName TableName
//   - from []byte
//   - to []byte
func (_e *MockRwTx_Expecter) Range(tableName interface{}, from interface{}, to interface{}) *MockRwTx_Range_Call {
	return &MockRwTx_Range_Call{Call: _e.mock.On("Range", tableName, from, to)}
}

func (_c *MockRwTx_Range_Call) Run(run func(tableName TableName, from []byte, to []byte)) *MockRwTx_Range_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TableName), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockRwTx_Range_Call) Return(_a0 Iter, _a1 error) *MockRwTx_Range_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_Range_Call) RunAndReturn(run func(TableName, []byte, []byte) (Iter, error)) *MockRwTx_Range_Call {
	_c.Call.Return(run)
	return _c
}

// RangeByShard provides a mock function with given fields: shardId, tableName, from, to
func (_m *MockRwTx) RangeByShard(shardId types.ShardId, tableName ShardedTableName, from []byte, to []byte) (Iter, error) {
	ret := _m.Called(shardId, tableName, from, to)

	if len(ret) == 0 {
		panic("no return value specified for RangeByShard")
	}

	var r0 Iter
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte, []byte) (Iter, error)); ok {
		return rf(shardId, tableName, from, to)
	}
	if rf, ok := ret.Get(0).(func(types.ShardId, ShardedTableName, []byte, []byte) Iter); ok {
		r0 = rf(shardId, tableName, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Iter)
		}
	}

	if rf, ok := ret.Get(1).(func(types.ShardId, ShardedTableName, []byte, []byte) error); ok {
		r1 = rf(shardId, tableName, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRwTx_RangeByShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeByShard'
type MockRwTx_RangeByShard_Call struct {
	*mock.Call
}

// RangeByShard is a helper method to define mock.On call
//   - shardId types.ShardId
//   - tableName ShardedTableName
//   - from []byte
//   - to []byte
func (_e *MockRwTx_Expecter) RangeByShard(shardId interface{}, tableName interface{}, from interface{}, to interface{}) *MockRwTx_RangeByShard_Call {
	return &MockRwTx_RangeByShard_Call{Call: _e.mock.On("RangeByShard", shardId, tableName, from, to)}
}

func (_c *MockRwTx_RangeByShard_Call) Run(run func(shardId types.ShardId, tableName ShardedTableName, from []byte, to []byte)) *MockRwTx_RangeByShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ShardId), args[1].(ShardedTableName), args[2].([]byte), args[3].([]byte))
	})
	return _c
}

func (_c *MockRwTx_RangeByShard_Call) Return(_a0 Iter, _a1 error) *MockRwTx_RangeByShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRwTx_RangeByShard_Call) RunAndReturn(run func(types.ShardId, ShardedTableName, []byte, []byte) (Iter, error)) *MockRwTx_RangeByShard_Call {
	_c.Call.Return(run)
	return _c
}

// ReadTimestamp provides a mock function with no fields
func (_m *MockRwTx) ReadTimestamp() Timestamp {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadTimestamp")
	}

	var r0 Timestamp
	if rf, ok := ret.Get(0).(func() Timestamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Timestamp)
	}

	return r0
}

// MockRwTx_ReadTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadTimestamp'
type MockRwTx_ReadTimestamp_Call struct {
	*mock.Call
}

// ReadTimestamp is a helper method to define mock.On call
func (_e *MockRwTx_Expecter) ReadTimestamp() *MockRwTx_ReadTimestamp_Call {
	return &MockRwTx_ReadTimestamp_Call{Call: _e.mock.On("ReadTimestamp")}
}

func (_c *MockRwTx_ReadTimestamp_Call) Run(run func()) *MockRwTx_ReadTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRwTx_ReadTimestamp_Call) Return(_a0 Timestamp) *MockRwTx_ReadTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRwTx_ReadTimestamp_Call) RunAndReturn(run func() Timestamp) *MockRwTx_ReadTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with no fields
func (_m *MockRwTx) Rollback() {
	_m.Called()
}

// MockRwTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockRwTx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockRwTx_Expecter) Rollback() *MockRwTx_Rollback_Call {
	return &MockRwTx_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockRwTx_Rollback_Call) Run(run func()) *MockRwTx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRwTx_Rollback_Call) Return() *MockRwTx_Rollback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRwTx_Rollback_Call) RunAndReturn(run func()) *MockRwTx_Rollback_Call {
	_c.Run(run)
	return _c
}

// NewMockRwTx creates a new instance of MockRwTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRwTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRwTx {
	mock := &MockRwTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
