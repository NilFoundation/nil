package jsonrpc

// @component Address address string "The address of the account or contract."
// @component TransactionCount transactionCount integer "The transaction count of the account."
// @component ContractBytecode contractBytecode string "The bytecode of the contract."
// @component Balance balance integer "The balance of the account."
// @component BlockShardId shardId integer "The ID of the shard where the block was generated."
// @component TransactionShardId shardId integer "The ID of the shard where the transaction was recorded."
// @component BlockHash hash string "The hash of the block whose information is requested."
// @component TransactionHash hash string "The hash of the transaction."
// @component BlockNumber blockNumber integer "The number of the block whose information is requested."
// @component TransactionNumber transactionNumber integer "The number of transactions contained within the block."
// @component TransactionIndex index integer "The index of the transaction whose information is requested."
// @component TransactionBytecode code string "The bytecode of the requested transaction."
// @component Encoded encoded string "The encoded bytecode of the transaction."
// @component FilterQuery filterQuery object "The query structure of the filter."
// @componentprop BlockHash blockHash string false "The hash of the blocks whose logs should be retrieved by the filter."
// @componentprop FromBlock fromBlock integer false "The beginning of the range of the blocks whose logs should be retrieved by the filter."
// @componentprop ToBlock toBlock integer false "The end of the range of the blocks whose logs should be retrieved by the filter."
// @componentprop Addresses addresses array true "The addresses of the accounts/contracts the logs for whose events should be retrieved by the filter."
// @componentprop Topics topics array true "The topics of the events whose lgos should be retrieved by the filter."
// @component Value value integer "The amount of tokens."
// @component IsDeleted isDeleted boolean "The flag that shows whether the filter has been successfully deleted."
// @component PollFilterId id string "The ID of the filter that should be polled."
// @component UninstallFilterId id string "The ID of the filter that should be uninstalled."
// @component FilterId id string "The ID of the filter."
// @component FilterChanges filterChanges array "The array of logs, block headers or pending transactions that have occurred since the last poll of the filter."
// @component FilterLogs filterLogs array "The array of logs that have been recorded since the last poll of the filter."
// @component ShardIds shardIds array "The array of shard IDs."
// @component NumShards numShards integer "The number of shards."
// @component GasShardId shardId integer "The ID of the shard whose gas price is requested."
// @component BaseFee baseFee integer "The current base fee the given shard."
// @component GasPrice gasPrice integer "The current gas price in the given shard."
// @component ChainId chainId integer "The chain ID of the network."
// @component ReturnedValue returnedValue string "The returned value of the executed contract."
// @component FullTx fullTx boolean "The flag that determines whether full transaction information is returned in the output."
// @component BlockNumberOrHash blockNumberOrHash object "The number/hash of the block."
// @componentprop RequireCanonical requireCanonical boolean true "The flag that determines whether the block must be a part of the canonical chain."
// @componentprop BlockHash blockHash string false "(Optional) The hash of the block. Either this or BlockNumber is required."
// @componentprop BlockNumber blockNumber integer false "(Optional) The number of the block. Either this or BlockHash is required."
// @component StateOverrides stateOverrides object "(Optional) Map of address-state pairs to be overrided."
// @component StorageKey storageKey string "The key (slot) to fetch from smart contract storage. 32-byte hash."
// @component StorageKeys storageKeys array "The array of keys (slots) to fetch from smart contract storage. 32-byte hashes."
// @component AccountProof accountProof object "Account data and storage values with Merkle proofs"
