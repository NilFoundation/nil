syntax = "proto3";

package executionproofs;
option go_package = "/proto";

// Uint256 represents a 256-bit unsigned integer as a sequence of uint64 parts
message Uint256 {
    repeated uint64 word_parts = 1;  // 4 uint64 parts composing the 256-bit number
}

// Address represents an Ethereum address
message Address {
    bytes address_bytes = 1;  // 20-byte address
}

// StackOp represents a single stack operation
message StackOp {
    bool is_read = 1;
    int32 index = 2;  // Index in the stack
    Uint256 value = 3;
    uint64 pc = 4;
}

// MemoryOp represents a single memory operation
message MemoryOp {
    bool is_read = 1;
    int32 index = 2;
    bytes value = 3;  // Single byte value
    uint64 pc = 4;
}

// Node represents a storage tree node
message Node {
    bytes node_data = 1;  // Encoded form of the Node
}

// Proof represents a single proof entry
message Proof {
    bytes proof_data = 1;
}

// StorageProofs represents a collection of proofs for a specific address
message StorageProofs {
    repeated Proof proof_list = 1;
}

// ExecutionTraces represents all proofs related to contract execution
message ExecutionTraces {
    repeated StackOp stack_ops = 1;
    repeated MemoryOp memory_ops = 2;
    map<string, StorageProofs> storage_proofs_by_address = 3;  // Address hex string to proofs mapping
    repeated bytes contract_bytecodes = 4;
}

enum OpCode {
    // 0x0 range - arithmetic ops
    STOP = 0;
    ADD = 1;
    MUL = 2;
    SUB = 3;
    DIV = 4;
    SDIV = 5;
    MOD = 6;
    SMOD = 7;
    ADDMOD = 8;
    MULMOD = 9;
    EXP = 10;
    SIGNEXTEND = 11;

    // 0x10 range - comparison ops
    LT = 16;  // 0x10
    GT = 17;
    SLT = 18;
    SGT = 19;
    EQ = 20;
    ISZERO = 21;
    AND = 22;
    OR = 23;
    XOR = 24;
    NOT = 25;
    BYTE = 26;
    SHL = 27;
    SHR = 28;
    SAR = 29;

    // 0x20 range - crypto
    KECCAK256 = 32;  // 0x20

    // 0x30 range - closure state
    ADDRESS = 48;        // 0x30
    BALANCE = 49;
    ORIGIN = 50;
    CALLER = 51;
    CALLVALUE = 52;
    CALLDATALOAD = 53;
    CALLDATASIZE = 54;
    CALLDATACOPY = 55;
    CODESIZE = 56;
    CODECOPY = 57;
    GASPRICE = 58;
    EXTCODESIZE = 59;
    EXTCODECOPY = 60;
    RETURNDATASIZE = 61;
    RETURNDATACOPY = 62;
    EXTCODEHASH = 63;

    // 0x40 range - block operations
    BLOCKHASH = 64;     // 0x40
    COINBASE = 65;
    TIMESTAMP = 66;
    NUMBER = 67;
    DIFFICULTY = 68;    // Same as RANDOM and PREVRANDAO
    GASLIMIT = 69;
    CHAINID = 70;
    SELFBALANCE = 71;
    BASEFEE = 72;
    BLOBHASH = 73;
    BLOBBASEFEE = 74;

    // 0x50 range - 'storage' and execution
    POP = 80;           // 0x50
    MLOAD = 81;
    MSTORE = 82;
    MSTORE8 = 83;
    SLOAD = 84;
    SSTORE = 85;
    JUMP = 86;
    JUMPI = 87;
    PC = 88;
    MSIZE = 89;
    GAS = 90;
    JUMPDEST = 91;
    TLOAD = 92;
    TSTORE = 93;
    MCOPY = 94;
    PUSH0 = 95;

    // 0x60-0x7f range - pushes
    PUSH1 = 96;
    PUSH2 = 97;
    PUSH3 = 98;
    PUSH4 = 99;
    PUSH5 = 100;
    PUSH6 = 101;
    PUSH7 = 102;
    PUSH8 = 103;
    PUSH9 = 104;
    PUSH10 = 105;
    PUSH11 = 106;
    PUSH12 = 107;
    PUSH13 = 108;
    PUSH14 = 109;
    PUSH15 = 110;
    PUSH16 = 111;
    PUSH17 = 112;
    PUSH18 = 113;
    PUSH19 = 114;
    PUSH20 = 115;
    PUSH21 = 116;
    PUSH22 = 117;
    PUSH23 = 118;
    PUSH24 = 119;
    PUSH25 = 120;
    PUSH26 = 121;
    PUSH27 = 122;
    PUSH28 = 123;
    PUSH29 = 124;
    PUSH30 = 125;
    PUSH31 = 126;
    PUSH32 = 127;

    // 0x80 range - dups
    DUP1 = 128;
    DUP2 = 129;
    DUP3 = 130;
    DUP4 = 131;
    DUP5 = 132;
    DUP6 = 133;
    DUP7 = 134;
    DUP8 = 135;
    DUP9 = 136;
    DUP10 = 137;
    DUP11 = 138;
    DUP12 = 139;
    DUP13 = 140;
    DUP14 = 141;
    DUP15 = 142;
    DUP16 = 143;

    // 0x90 range - swaps
    SWAP1 = 144;
    SWAP2 = 145;
    SWAP3 = 146;
    SWAP4 = 147;
    SWAP5 = 148;
    SWAP6 = 149;
    SWAP7 = 150;
    SWAP8 = 151;
    SWAP9 = 152;
    SWAP10 = 153;
    SWAP11 = 154;
    SWAP12 = 155;
    SWAP13 = 156;
    SWAP14 = 157;
    SWAP15 = 158;
    SWAP16 = 159;

    // 0xa0 range - logging ops
    LOG0 = 160;
    LOG1 = 161;
    LOG2 = 162;
    LOG3 = 163;
    LOG4 = 164;

    // 0xf0 range - closures
    CREATE = 240;
    CALL = 241;
    CALLCODE = 242;
    RETURN = 243;
    DELEGATECALL = 244;
    CREATE2 = 245;
    STATICCALL = 250;
    REVERT = 253;
    INVALID = 254;
    SELFDESTRUCT = 255;
}
