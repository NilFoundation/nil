package main

import (
	"crypto/ecdsa"
	"math/big"
	"testing"

	"github.com/NilFoundation/nil/nil/common"
	"github.com/NilFoundation/nil/nil/internal/contracts"
	"github.com/NilFoundation/nil/nil/internal/types"
	"github.com/NilFoundation/nil/nil/services/faucet"
	"github.com/NilFoundation/nil/nil/services/nilservice"
	"github.com/NilFoundation/nil/nil/services/rpc/transport"
	"github.com/NilFoundation/nil/nil/tests"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/holiman/uint256"
	"github.com/rs/zerolog/log"
	"github.com/stretchr/testify/suite"
)

type SuiteFaucet struct {
	tests.ShardedSuite
	faucetClient *faucet.Client
}

func (s *SuiteFaucet) SetupTest() {
	s.Start(&nilservice.Config{
		NShards:              5,
		CollatorTickPeriodMs: 200,
	}, 10225)

	s.DefaultClient, _ = s.StartRPCNode(tests.WithDhtBootstrapByValidators, nil)
	s.faucetClient, _ = tests.StartFaucetService(s.T(), s.Context, &s.Wg, s.DefaultClient)
}

func (s *SuiteFaucet) TearDownTest() {
	s.Cancel()
}

func (s *SuiteFaucet) createWalletViaFaucet(ownerPrivateKey *ecdsa.PrivateKey, value int64) types.Address {
	s.T().Helper()

	ownerPublicKey := crypto.CompressPubkey(&ownerPrivateKey.PublicKey)

	salt := uint256.NewInt(123).Bytes32()
	callData, err := contracts.NewCallData(contracts.NameFaucet, "createWallet", ownerPublicKey, salt, big.NewInt(value))
	s.Require().NoError(err)

	resHash, err := s.DefaultClient.SendExternalMessage(callData, types.FaucetAddress, nil, types.Value{})
	s.Require().NoError(err)

	res := s.WaitForReceipt(resHash)
	s.Require().True(res.Success)

	// Checking whether the address generated by CREATE2 matches the expected one
	walletCode := contracts.PrepareDefaultWalletForOwnerCode(ownerPublicKey)
	walletAddr := types.CreateAddressForCreate2(types.FaucetAddress, walletCode, salt)
	s.Require().Equal(common.LeftPadBytes(walletAddr.Bytes(), 32), []byte(res.Logs[0].Data[:]))
	return walletAddr
}

func (s *SuiteFaucet) TestCreateWalletViaFaucet() {
	userPrivateKey, err := crypto.GenerateKey()
	s.Require().NoError(err)

	var value int64 = 100000
	walletAddress := s.createWalletViaFaucet(userPrivateKey, value)

	blockNumber := transport.LatestBlockNumber
	balance, err := s.DefaultClient.GetBalance(walletAddress, transport.BlockNumberOrHash{BlockNumber: &blockNumber})
	s.Require().NoError(err)

	s.Require().NoError(err)
	s.Require().Equal(uint64(value), balance.Uint64())
}

func (s *SuiteFaucet) TestDeployContractViaFaucet() {
	userPrivateKey, err := crypto.GenerateKey()
	s.Require().NoError(err)
	userPublicKey := crypto.CompressPubkey(&userPrivateKey.PublicKey)

	value := types.NewValueFromUint64(123_456_789)
	walletCode := contracts.PrepareDefaultWalletForOwnerCode(userPublicKey)

	code := types.BuildDeployPayload(walletCode, common.EmptyHash)
	walletAddr := types.CreateAddress(types.FaucetAddress.ShardId(), code)
	msgHash, err := s.faucetClient.TopUpViaFaucet(types.FaucetAddress, walletAddr, value)
	s.Require().NoError(err)
	receipt := s.WaitForReceipt(msgHash)
	s.Require().True(receipt.Success)
	for _, r := range receipt.OutReceipts {
		s.Require().True(r.Success)
	}

	msgHash, receiptContractAddress, err := s.DefaultClient.DeployExternal(walletAddr.ShardId(), code, types.GasToValue(100_000))
	s.Require().NoError(err)
	s.Require().Equal(walletAddr, receiptContractAddress)
	receipt = s.WaitForReceipt(msgHash)
	s.Require().True(receipt.Success)
	for _, r := range receipt.OutReceipts {
		s.Require().True(r.Success)
	}

	balance, err := s.DefaultClient.GetBalance(walletAddr, "latest")
	s.Require().NoError(err)
	s.Require().Less(balance.Uint64(), value.Uint64())
	s.Require().Positive(balance.Uint64())
	log.Logger.Info().Msgf("Spent %s nil", value.Sub(balance))
}

func (s *SuiteFaucet) TestTopUpViaFaucet() {
	pk, err := crypto.GenerateKey()
	s.Require().NoError(err)
	pubKey := crypto.CompressPubkey(&pk.PublicKey)
	walletCode := contracts.PrepareDefaultWalletForOwnerCode(pubKey)

	address, receipt := s.DeployContractViaMainWallet(types.BaseShardId, types.BuildDeployPayload(walletCode, common.EmptyHash), types.Value{})
	receipt = s.WaitForReceipt(receipt.MsgHash)
	s.Require().NotNil(receipt)
	s.Require().True(receipt.Success)
	for _, r := range receipt.OutReceipts {
		s.Require().True(r.Success)
	}

	testTopUp := func(initialValue, value, expectedValue uint64, delta float64) {
		balance, err := s.DefaultClient.GetBalance(address, transport.LatestBlockNumber)
		s.Require().NoError(err)
		s.Require().Equal(initialValue, balance.Uint64())

		code, err := s.DefaultClient.GetCode(address, transport.LatestBlockNumber)
		s.Require().NoError(err)
		s.Require().NotEmpty(code)

		mshHash, err := s.faucetClient.TopUpViaFaucet(types.FaucetAddress, address, types.NewValueFromUint64(value))
		s.Require().NoError(err)
		receipt = s.WaitForReceipt(mshHash)
		s.Require().NotNil(receipt)
		s.Require().True(receipt.Success)
		for _, r := range receipt.OutReceipts {
			s.Require().True(r.Success)
		}

		balance, err = s.DefaultClient.GetBalance(address, transport.LatestBlockNumber)
		s.Require().NoError(err)
		s.Require().InDelta(expectedValue, balance.Uint64(), delta)
	}

	var value1 uint64 = 5 * 1_000_000_000_000_000
	balance1 := value1
	s.Run("Top up for the first time without exceeding the limit", func() {
		testTopUp(0, value1, balance1, 0)
	})

	var value2 uint64 = 4 * 1_000_000_000_000_000
	balance2 := balance1 + value2
	s.Run("Top up for the second time without exceeding the limit", func() {
		testTopUp(balance1, value2, balance2, 0)
	})

	// this test is quite flaky, cause it checks
	// functionality that depends on block generation speed
	var value3 uint64 = 5 * 1_000_000_000_000_000
	var balance3 uint64 = 10_000_000_000_000_000
	s.Run("Top up over limit", func() {
		testTopUp(balance2, value3, balance3, float64(balance3)*0.2)
	})
}

func (s *SuiteFaucet) TestTopUpCurrencyViaFaucet() {
	pk, err := crypto.GenerateKey()
	s.Require().NoError(err)
	pubKey := crypto.CompressPubkey(&pk.PublicKey)
	walletCode := contracts.PrepareDefaultWalletForOwnerCode(pubKey)

	address, receipt := s.DeployContractViaMainWallet(types.BaseShardId, types.BuildDeployPayload(walletCode, common.EmptyHash), types.Value{})
	receipt = s.WaitForReceipt(receipt.MsgHash)
	s.Require().NotNil(receipt)
	s.Require().True(receipt.Success)

	value := types.NewValueFromUint64(1000)
	faucetsAddr := []types.Address{types.EthFaucetAddress, types.UsdtFaucetAddress, types.BtcFaucetAddress}
	for _, faucet := range faucetsAddr {
		mshHash, err := s.faucetClient.TopUpViaFaucet(faucet, address, value)
		s.Require().NoError(err)
		receipt = s.WaitForReceipt(mshHash)
		s.Require().NotNil(receipt)
		s.Require().True(receipt.Success)
		for _, r := range receipt.OutReceipts {
			s.Require().True(r.Success)
		}
	}
	currencies, err := s.DefaultClient.GetCurrencies(address, transport.LatestBlockNumber)
	s.Require().NoError(err)
	s.Require().Len(currencies, 3)
	for _, faucet := range faucetsAddr {
		curValue, ok := currencies[types.CurrencyId(faucet)]
		s.Require().True(ok)
		s.Require().Equal(value.Uint64(), curValue.Uint64())
	}
}

func TestSuiteFaucet(t *testing.T) {
	t.Parallel()

	suite.Run(t, new(SuiteFaucet))
}
