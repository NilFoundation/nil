//startImportStatements
import { createRequire } from "node:module";

const require = createRequire(import.meta.url);

const {
  Faucet,
  HttpTransport,
  LocalECDSAKeySigner,
  PublicClient,
  WalletV1,
  generateRandomPrivateKey,
  convertEthToWei,
  waitTillCompleted,
  bytesToHex,
  externalDeploymentMessage,
  ExternalMessageEnvelope,
  hexToBytes,
  isHexString,
  refineAddress,
} = require("@nilfoundation/niljs");
import { secp256k1 } from "@noble/curves/secp256k1";

import {} from "ethers";
import { type Abi, encodeFunctionData } from "viem";
import { concatBytes, numberToBytesBE } from "@noble/curves/abstract/utils";

//endImportStatements

import { NODE_MODULES, RPC_GLOBAL } from "./globals";

const util = require("node:util");
const exec = util.promisify(require("node:child_process").exec);
const RPC_ENDPOINT = RPC_GLOBAL;

beforeAll(async () => {
  await exec(
    `solc -o ./tests/MultiSigWallet --abi --bin ./tests/MultiSigWallet.sol --overwrite ${NODE_MODULES}`,
  );
});

//startRefineFunctionHexData
const refineFunctionHexData = ({
  data,
  abi,
  functionName,
  args,
}: {
  data?: Uint8Array | Hex;
  abi?: Abi;
  functionName?: string;
  args?: unknown[];
}): Hex => {
  if (!data && !abi) {
    return "0x";
  }
  if (data) {
    return typeof data === "string" ? data : bytesToHex(data);
  }
  if (!functionName) {
    throw new Error("Function name is required");
  }
  if (!abi) {
    throw new Error("ABI is required");
  }
  return encodeFunctionData({
    abi,
    functionName: functionName,
    args: args || [],
  });
};
//endRefineFunctionHexData

describe.sequential("the multisig wallet performs all operations internally", async () => {
  test.sequential(
    "signers can withdraw default tokens from the wallet internally",
    async () => {
      //startHelpers
      /**
       * MultisigSigner is a special signer that can create an array of signatures
       * when given a the data to sign.
       *
       * @class MultisigSigner
       * @typedef {MultisigSigner}
       * @implements {ISigner}
       */
      class MultisigSigner implements ISigner {
        private keys: Uint8Array[];
        constructor(keys: Uint8Array[]) {
          for (let i = 0; i < keys.length; i++) {
            if (keys[i].length !== 32) {
              throw new Error("Invalid key length");
            }
          }
          this.keys = keys;
        }

        async sign(data: Uint8Array): Promise<Uint8Array> {
          const fullSignatures = new Uint8Array(this.keys.length * 65);
          for (let i = 0; i < this.keys.length; i++) {
            const signature = secp256k1.sign(data, this.keys[i]);
            const { r, s, recovery } = signature;
            fullSignatures.set(
              concatBytes(
                numberToBytesBE(r, 32),
                numberToBytesBE(s, 32),
                numberToBytesBE(recovery, 1),
              ),
              i * 65,
            );
          }
          return fullSignatures;
        }
        getPublicKey(params: unknown): Promise<Uint8Array> {
          throw new Error("Method not implemented.");
        }
        getAddress(params: unknown): Promise<Uint8Array> {
          throw new Error("Method not implemented.");
        }
      }

      /**
       * MultiSigWallet is a 'helper' class for sending external messages
       * to the multi-signature wallet.
       *
       * @class MultiSigWallet
       * @typedef {MultiSigWallet}
       */
      class MultiSigWallet {
        private keys: Uint8Array[];
        private salt: bigint;
        private chainId: number;
        private client: PublicClient;
        public address: Hex;
        constructor(
          keys: (Uint8Array | Hex)[],
          salt: bigint,
          chainId: number,
          shardId: number,
          client: PublicClient,
        ) {
          this.keys = keys.map((key) => {
            if (isHexString(key)) {
              return hexToBytes(key);
            }
            return key;
          });
          this.salt = salt;
          this.address = MultiSigWallet.calculateAddress(chainId, shardId, keys, salt);
          this.chainId = chainId;
          this.client = client;
        }
        static calculateAddress(
          chainId: number,
          shardId: number,
          keys: (Uint8Array | Hex)[],
          salt: bigint,
        ) {
          const msg = externalDeploymentMessage(
            {
              abi: multiSigWalletAbi,
              args: [keys],
              bytecode: multiSigWalletBytecode,
              salt,
              shard: shardId,
            },
            chainId,
          );
          return msg.hexAddress();
        }

        async sendTransaction({
          to,
          refundTo,
          bounceTo,
          data,
          abi,
          functionName,
          args,
          deploy,
          seqno,
          feeCredit,
          value,
          tokens,
          chainId,
        }: SendMessageParams) {
          const refinedSeqno = seqno ?? (await this.client.getMessageCount(this.address, "latest"));

          const hexTo = bytesToHex(refineAddress(to));
          const hexRefundTo = bytesToHex(refineAddress(refundTo ?? this.address));
          const hexBounceTo = bytesToHex(refineAddress(bounceTo ?? this.address));
          const hexData = refineFunctionHexData({ data, abi, functionName, args });

          const callData = encodeFunctionData({
            abi: multiSigWalletAbi,
            functionName: "asyncCall",
            args: [
              hexTo,
              hexRefundTo,
              hexBounceTo,
              feeCredit,
              !!deploy,
              tokens ?? [],
              value ?? 0n,
              hexData,
            ],
          });
          const msg = new ExternalMessageEnvelope({
            isDeploy: !!deploy,
            data: hexToBytes(callData),
            to: hexToBytes(this.address),
            seqno: refinedSeqno,
            chainId: chainId ?? this.chainId,
            authData: new Uint8Array(0),
          });

          const { raw } = await msg.encodeWithSignature(signer);
          const hash = await this.client.sendRawMessage(raw);
          return hash;
        }
      }

      //endHelpers

      //startInitialUsageFlow
      const SALT = BigInt(Math.floor(Math.random() * 10000));

      const client = new PublicClient({
        transport: new HttpTransport({
          endpoint: RPC_ENDPOINT,
        }),
        shardId: 1,
      });

      const faucet = new Faucet(client);

      const pkOne = generateRandomPrivateKey();
      const pkTwo = generateRandomPrivateKey();
      const pkThree = generateRandomPrivateKey();

      const signerOne = new LocalECDSAKeySigner({
        privateKey: pkOne,
      });
      const signerTwo = new LocalECDSAKeySigner({
        privateKey: pkTwo,
      });
      const signerThree = new LocalECDSAKeySigner({
        privateKey: pkThree,
      });

      const pubkeyOne = await signerOne.getPublicKey();
      const pubkeyTwo = await signerTwo.getPublicKey();
      const pubkeyThree = await signerThree.getPublicKey();

      const walletOne = new WalletV1({
        pubkey: pubkeyOne,
        client: client,
        signer: signerOne,
        shardId: 1,
        salt: SALT,
      });

      const walletOneAddress = bytesToHex(walletOne.address);

      const walletTwo = new WalletV1({
        pubkey: pubkeyTwo,
        client: client,
        signer: signerTwo,
        shardId: 1,
        salt: SALT,
      });

      await faucet.withdrawToWithRetry(walletOneAddress, convertEthToWei(10));

      await walletOne.selfDeploy(true);

      //endInitialUsageFlow

      expect(walletOneAddress).toBeDefined();
      const walletOneCode = await client.getCode(walletOneAddress, "latest");
      expect(walletOneCode).toBeDefined();
      expect(walletOneCode.length).toBeGreaterThan(10);

      const multiSigWalletBytecode =
        "0x6080604052604051611b09380380611b09833981810160405281019061002591906103d0565b5f81519050600381111561006e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006590610497565b60405180910390fd5b60018110156100b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a990610525565b60405180910390fd5b815f90805190602001906100c79291906100cf565b505050610822565b828054828255905f5260205f20908101928215610115579160200282015b828111156101145782518290816101049190610753565b50916020019190600101906100ed565b5b5090506101229190610126565b5090565b5b80821115610145575f818161013c9190610149565b50600101610127565b5090565b5080546101559061057a565b5f825580601f106101665750610183565b601f0160209004905f5260205f20908101906101829190610186565b5b50565b5b8082111561019d575f815f905550600101610187565b5090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6101fc826101b6565b810181811067ffffffffffffffff8211171561021b5761021a6101c6565b5b80604052505050565b5f61022d6101a1565b905061023982826101f3565b919050565b5f67ffffffffffffffff821115610258576102576101c6565b5b602082029050602081019050919050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff82111561028b5761028a6101c6565b5b610294826101b6565b9050602081019050919050565b8281835e5f83830152505050565b5f6102c16102bc84610271565b610224565b9050828152602081018484840111156102dd576102dc61026d565b5b6102e88482856102a1565b509392505050565b5f82601f830112610304576103036101b2565b5b81516103148482602086016102af565b91505092915050565b5f61032f61032a8461023e565b610224565b9050808382526020820190506020840283018581111561035257610351610269565b5b835b8181101561039957805167ffffffffffffffff811115610377576103766101b2565b5b80860161038489826102f0565b85526020850194505050602081019050610354565b5050509392505050565b5f82601f8301126103b7576103b66101b2565b5b81516103c784826020860161031d565b91505092915050565b5f602082840312156103e5576103e46101aa565b5b5f82015167ffffffffffffffff811115610402576104016101ae565b5b61040e848285016103a3565b91505092915050565b5f82825260208201905092915050565b7f4d756c746953696757616c6c65743a20746f6f206d616e79207075626c6963205f8201527f6b65797300000000000000000000000000000000000000000000000000000000602082015250565b5f610481602483610417565b915061048c82610427565b604082019050919050565b5f6020820190508181035f8301526104ae81610475565b9050919050565b7f4d756c746953696757616c6c65743a20746f6f20666577207075626c6963206b5f8201527f6579730000000000000000000000000000000000000000000000000000000000602082015250565b5f61050f602383610417565b915061051a826104b5565b604082019050919050565b5f6020820190508181035f83015261053c81610503565b9050919050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061059157607f821691505b6020821081036105a4576105a361054d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826105cb565b61061086836105cb565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61065461064f61064a84610628565b610631565b610628565b9050919050565b5f819050919050565b61066d8361063a565b6106816106798261065b565b8484546105d7565b825550505050565b5f5f905090565b610698610689565b6106a3818484610664565b505050565b5b818110156106c6576106bb5f82610690565b6001810190506106a9565b5050565b601f82111561070b576106dc816105aa565b6106e5846105bc565b810160208510156106f4578190505b610708610700856105bc565b8301826106a8565b50505b505050565b5f82821c905092915050565b5f61072b5f1984600802610710565b1980831691505092915050565b5f610743838361071c565b9150826002028217905092915050565b61075c82610543565b67ffffffffffffffff811115610775576107746101c6565b5b61077f825461057a565b61078a8282856106ca565b5f60209050601f8311600181146107bb575f84156107a9578287015190505b6107b38582610738565b86555061081a565b601f1984166107c9866105aa565b5f5b828110156107f0578489015182556001820191506020850194506020810190506107cb565b8683101561080d5784890151610809601f89168261071c565b8355505b6001600288020188555050505b505050505050565b6112da8061082f5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630677d9c714610043578063796d7f561461005f578063b31d63cc1461008f575b5f5ffd5b61005d60048036038101906100589190610967565b6100bf565b005b61007960048036038101906100749190610a53565b610167565b6040516100869190610abf565b60405180910390f35b6100a960048036038101906100a49190610b88565b6102f0565b6040516100b69190610c42565b60405180910390f35b6100c76103c8565b15610107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fe90610ce2565b60405180910390fd5b61015c8989898960038a898b8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506104d4565b505050505050505050565b5f5f5f90505f5f8054905090505f5f90505b8160ff168110156102e2575f6101d887878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508563ffffffff166102f0565b90506001846101e79190610d3c565b93506102955f83815481106101ff576101fe610d73565b5b905f5260205f2001805461021290610dcd565b80601f016020809104026020016040519081016040528092919081815260200182805461023e90610dcd565b80156102895780601f1061026057610100808354040283529160200191610289565b820191905f5260205f20905b81548152906001019060200180831161026c57829003601f168201915b5050505050898361056a565b6102d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cb90610e47565b60405180910390fd5b508080600101915050610179565b506001925050509392505050565b60605f6041836103009190610e65565b90505f5f5f83602001870151925083604001870151915060ff84604101880151169050601b8160ff16101561033f57601b8161033c9190610eb2565b90505b601b8160ff1614806103545750601c8160ff16145b61035c575f5ffd5b604167ffffffffffffffff81111561037757610376610757565b5b6040519080825280601f01601f1916602001820160405280156103a95781602001600182028036833780820191505090505b5094508260208601528160408601528060608601535050505092915050565b5f60605f5f60ff73ffffffffffffffffffffffffffffffffffffffff16836040516103f39190610f20565b5f60405180830381855afa9150503d805f811461042b576040519150601f19603f3d011682016040523d82523d5f602084013e610430565b606091505b509150915081610475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046c90610f80565b60405180910390fd5b5f8151116104b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104af9061100e565b60405180910390fd5b808060200190518101906104cc9190611040565b935050505090565b60fd73ffffffffffffffffffffffffffffffffffffffff1663f69756538486888d8d8d8d8a8a6040518a63ffffffff1660e01b815260040161051d9897969594939291906111d7565b60206040518083038185885af1158015610539573d5f5f3e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061055e9190611040565b50505050505050505050565b5f5f84848460405160200161058193929190611261565b60405160208183030381529060405290505f5f606060fe73ffffffffffffffffffffffffffffffffffffffff16846040516105bc9190610f20565b5f60405180830381855afa9150503d805f81146105f4576040519150601f19603f3d011682016040523d82523d5f602084013e6105f9565b606091505b50809250819450505082610642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063990610f80565b60405180910390fd5b5f81511115610662578080602001905181019061065f9190611040565b91505b819450505050509392505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106aa82610681565b9050919050565b6106ba816106a0565b81146106c4575f5ffd5b50565b5f813590506106d5816106b1565b92915050565b5f819050919050565b6106ed816106db565b81146106f7575f5ffd5b50565b5f81359050610708816106e4565b92915050565b5f8115159050919050565b6107228161070e565b811461072c575f5ffd5b50565b5f8135905061073d81610719565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61078d82610747565b810181811067ffffffffffffffff821117156107ac576107ab610757565b5b80604052505050565b5f6107be610670565b90506107ca8282610784565b919050565b5f67ffffffffffffffff8211156107e9576107e8610757565b5b602082029050602081019050919050565b5f5ffd5b5f5ffd5b61080b816106a0565b8114610815575f5ffd5b50565b5f8135905061082681610802565b92915050565b5f60408284031215610841576108406107fe565b5b61084b60406107b5565b90505f61085a84828501610818565b5f83015250602061086d848285016106fa565b60208301525092915050565b5f61088b610886846107cf565b6107b5565b905080838252602082019050604084028301858111156108ae576108ad6107fa565b5b835b818110156108d757806108c3888261082c565b8452602084019350506040810190506108b0565b5050509392505050565b5f82601f8301126108f5576108f4610743565b5b8135610905848260208601610879565b91505092915050565b5f5ffd5b5f5f83601f84011261092757610926610743565b5b8235905067ffffffffffffffff8111156109445761094361090e565b5b6020830191508360018202830111156109605761095f6107fa565b5b9250929050565b5f5f5f5f5f5f5f5f5f6101008a8c03121561098557610984610679565b5b5f6109928c828d016106c7565b99505060206109a38c828d016106c7565b98505060406109b48c828d016106c7565b97505060606109c58c828d016106fa565b96505060806109d68c828d0161072f565b95505060a08a013567ffffffffffffffff8111156109f7576109f661067d565b5b610a038c828d016108e1565b94505060c0610a148c828d016106fa565b93505060e08a013567ffffffffffffffff811115610a3557610a3461067d565b5b610a418c828d01610912565b92509250509295985092959850929598565b5f5f5f60408486031215610a6a57610a69610679565b5b5f610a77868287016106fa565b935050602084013567ffffffffffffffff811115610a9857610a9761067d565b5b610aa486828701610912565b92509250509250925092565b610ab98161070e565b82525050565b5f602082019050610ad25f830184610ab0565b92915050565b5f5ffd5b5f67ffffffffffffffff821115610af657610af5610757565b5b610aff82610747565b9050602081019050919050565b828183375f83830152505050565b5f610b2c610b2784610adc565b6107b5565b905082815260208101848484011115610b4857610b47610ad8565b5b610b53848285610b0c565b509392505050565b5f82601f830112610b6f57610b6e610743565b5b8135610b7f848260208601610b1a565b91505092915050565b5f5f60408385031215610b9e57610b9d610679565b5b5f83013567ffffffffffffffff811115610bbb57610bba61067d565b5b610bc785828601610b5b565b9250506020610bd8858286016106fa565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f610c1482610be2565b610c1e8185610bec565b9350610c2e818560208601610bfc565b610c3781610747565b840191505092915050565b5f6020820190508181035f830152610c5a8184610c0a565b905092915050565b5f82825260208201905092915050565b7f547279696e6720746f2063616c6c2065787465726e616c2066756e6374696f6e5f8201527f207769746820696e7465726e616c206d65737361676500000000000000000000602082015250565b5f610ccc603683610c62565b9150610cd782610c72565b604082019050919050565b5f6020820190508181035f830152610cf981610cc0565b9050919050565b5f63ffffffff82169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d4682610d00565b9150610d5183610d00565b9250828201905063ffffffff811115610d6d57610d6c610d0f565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610de457607f821691505b602082108103610df757610df6610da0565b5b50919050565b7f496e76616c6964207369676e61747572650000000000000000000000000000005f82015250565b5f610e31601183610c62565b9150610e3c82610dfd565b602082019050919050565b5f6020820190508181035f830152610e5e81610e25565b9050919050565b5f610e6f826106db565b9150610e7a836106db565b9250828202610e88816106db565b91508282048414831517610e9f57610e9e610d0f565b5b5092915050565b5f60ff82169050919050565b5f610ebc82610ea6565b9150610ec783610ea6565b9250828201905060ff811115610ee057610edf610d0f565b5b92915050565b5f81905092915050565b5f610efa82610be2565b610f048185610ee6565b9350610f14818560208601610bfc565b80840191505092915050565b5f610f2b8284610ef0565b915081905092915050565b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f610f6a602083610c62565b9150610f7582610f36565b602082019050919050565b5f6020820190508181035f830152610f9781610f5e565b9050919050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c6964206461746100000000000000000000000000000000000000000000602082015250565b5f610ff8602a83610c62565b915061100382610f9e565b604082019050919050565b5f6020820190508181035f83015261102581610fec565b9050919050565b5f8151905061103a81610719565b92915050565b5f6020828403121561105557611054610679565b5b5f6110628482850161102c565b91505092915050565b61107481610ea6565b82525050565b611083816106a0565b82525050565b611092816106db565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f819050919050565b5f6110e46110df6110da84610681565b6110c1565b610681565b9050919050565b5f6110f5826110ca565b9050919050565b5f611106826110eb565b9050919050565b611116816110fc565b82525050565b611125816106db565b82525050565b604082015f82015161113f5f85018261110d565b506020820151611152602085018261111c565b50505050565b5f611163838361112b565b60408301905092915050565b5f602082019050919050565b5f61118582611098565b61118f81856110a2565b935061119a836110b2565b805f5b838110156111ca5781516111b18882611158565b97506111bc8361116f565b92505060018101905061119d565b5085935050505092915050565b5f610100820190506111eb5f83018b610ab0565b6111f8602083018a61106b565b611205604083018961107a565b611212606083018861107a565b61121f608083018761107a565b61122c60a0830186611089565b81810360c083015261123e818561117b565b905081810360e08301526112528184610c0a565b90509998505050505050505050565b5f6060820190508181035f8301526112798186610c0a565b90506112886020830185611089565b818103604083015261129a8184610c0a565b905094935050505056fea2646970667358221220880bb1acd90a189d032fbdfb5ee1edf3b7307d79d5d7e6e5945a28a0e7d6bb6164736f6c634300081b0033";

      const multiSigWalletAbi = [
        {
          inputs: [{ internalType: "bytes[]", name: "_publicKeys", type: "bytes[]" }],
          stateMutability: "payable",
          type: "constructor",
        },
        {
          inputs: [
            { internalType: "address", name: "dst", type: "address" },
            { internalType: "address", name: "refundTo", type: "address" },
            { internalType: "address", name: "bounceTo", type: "address" },
            { internalType: "uint256", name: "feeCredit", type: "uint256" },
            { internalType: "bool", name: "deploy", type: "bool" },
            {
              components: [
                { internalType: "CurrencyId", name: "id", type: "address" },
                { internalType: "uint256", name: "amount", type: "uint256" },
              ],
              internalType: "struct Nil.Token[]",
              name: "tokens",
              type: "tuple[]",
            },
            { internalType: "uint256", name: "value", type: "uint256" },
            { internalType: "bytes", name: "callData", type: "bytes" },
          ],
          name: "asyncCall",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            { internalType: "bytes", name: "_signatures", type: "bytes" },
            { internalType: "uint256", name: "_pos", type: "uint256" },
          ],
          name: "parseSignature",
          outputs: [{ internalType: "bytes", name: "signature", type: "bytes" }],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            { internalType: "uint256", name: "hash", type: "uint256" },
            { internalType: "bytes", name: "signature", type: "bytes" },
          ],
          name: "verifyExternal",
          outputs: [{ internalType: "bool", name: "", type: "bool" }],
          stateMutability: "view",
          type: "function",
        },
      ] as const;

      //startMultiSigDeployment
      const hexKeys = [pubkeyOne, pubkeyTwo, pubkeyThree].map((key) => bytesToHex(key));

      const { address: multiSigWalletAddress, hash: deploymentMessageHash } =
        await walletOne.deployContract({
          bytecode: multiSigWalletBytecode,
          abi: multiSigWalletAbi,
          args: [hexKeys],
          value: convertEthToWei(0.001),
          feeCredit: 10_000_000n,
          salt: SALT,
          shardId: 1,
        });

      const signer = new MultisigSigner([pkOne, pkTwo, pkThree].map((x) => hexToBytes(x)));

      const receipts = await waitTillCompleted(client, 1, deploymentMessageHash);

      //endMultiSigDeployment

      expect(receipts.some((receipt) => !receipt.success)).toBe(false);

      const code = await client.getCode(multiSigWalletAddress, "latest");

      expect(code).toBeDefined();
      expect(code.length).toBeGreaterThan(10);

      //startTransfer
      const chainId = await client.chainId();

      const multiWallet = new MultiSigWallet(hexKeys, SALT, chainId, 1, client);

      const withdrawalHash = await multiWallet.sendTransaction({
        to: walletTwo.address,
        value: convertEthToWei(0.000001),
        feeCredit: 10_000_000n,
      });

      await waitTillCompleted(client, 1, withdrawalHash);

      const balance = await client.getBalance(bytesToHex(walletTwo.address), "latest");

      //endTransfer

      expect(balance).toBe(convertEthToWei(0.000001));
    },
    100000,
  );
});
