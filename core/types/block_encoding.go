// Code generated by fastssz. DO NOT EDIT.
// Hash: 1da346266f190042ab36c4ea3759706dbd43fb14440e9ac1d897d0d0313e811b
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BlockNumberList object
func (b *BlockNumberList) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlockNumberList object to a target array
func (b *BlockNumberList) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'List'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'List'
	if size := len(b.List); size > 10000 {
		err = ssz.ErrListTooBigFn("BlockNumberList.List", size, 10000)
		return
	}
	for ii := 0; ii < len(b.List); ii++ {
		dst = ssz.MarshalUint64(dst, b.List[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BlockNumberList object
func (b *BlockNumberList) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'List'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'List'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 8, 10000)
		if err != nil {
			return err
		}
		b.List = ssz.ExtendUint64(b.List, num)
		for ii := 0; ii < num; ii++ {
			b.List[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockNumberList object
func (b *BlockNumberList) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'List'
	size += len(b.List) * 8

	return
}

// HashTreeRoot ssz hashes the BlockNumberList object
func (b *BlockNumberList) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlockNumberList object with a hasher
func (b *BlockNumberList) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'List'
	{
		if size := len(b.List); size > 10000 {
			err = ssz.ErrListTooBigFn("BlockNumberList.List", size, 10000)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.List {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(b.List))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(10000, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BlockNumberList object
func (b *BlockNumberList) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the Block object
func (b *Block) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Block object to a target array
func (b *Block) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Id'
	dst = ssz.MarshalUint64(dst, uint64(b.Id))

	// Field (1) 'PrevBlock'
	dst = append(dst, b.PrevBlock[:]...)

	// Field (2) 'SmartContractsRoot'
	dst = append(dst, b.SmartContractsRoot[:]...)

	// Field (3) 'InMessagesRoot'
	dst = append(dst, b.InMessagesRoot[:]...)

	// Field (4) 'OutMessagesRoot'
	dst = append(dst, b.OutMessagesRoot[:]...)

	// Field (5) 'OutMessagesNum'
	dst = ssz.MarshalUint32(dst, b.OutMessagesNum)

	// Field (6) 'ReceiptsRoot'
	dst = append(dst, b.ReceiptsRoot[:]...)

	// Field (7) 'ChildBlocksRootHash'
	dst = append(dst, b.ChildBlocksRootHash[:]...)

	// Field (8) 'MasterChainHash'
	dst = append(dst, b.MasterChainHash[:]...)

	// Field (9) 'LogsBloom'
	dst = append(dst, b.LogsBloom[:]...)

	// Field (10) 'Timestamp'
	dst = ssz.MarshalUint64(dst, b.Timestamp)

	return
}

// UnmarshalSSZ ssz unmarshals the Block object
func (b *Block) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 500 {
		return ssz.ErrSize
	}

	// Field (0) 'Id'
	b.Id = BlockNumber(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'PrevBlock'
	copy(b.PrevBlock[:], buf[8:40])

	// Field (2) 'SmartContractsRoot'
	copy(b.SmartContractsRoot[:], buf[40:72])

	// Field (3) 'InMessagesRoot'
	copy(b.InMessagesRoot[:], buf[72:104])

	// Field (4) 'OutMessagesRoot'
	copy(b.OutMessagesRoot[:], buf[104:136])

	// Field (5) 'OutMessagesNum'
	b.OutMessagesNum = ssz.UnmarshallUint32(buf[136:140])

	// Field (6) 'ReceiptsRoot'
	copy(b.ReceiptsRoot[:], buf[140:172])

	// Field (7) 'ChildBlocksRootHash'
	copy(b.ChildBlocksRootHash[:], buf[172:204])

	// Field (8) 'MasterChainHash'
	copy(b.MasterChainHash[:], buf[204:236])

	// Field (9) 'LogsBloom'
	copy(b.LogsBloom[:], buf[236:492])

	// Field (10) 'Timestamp'
	b.Timestamp = ssz.UnmarshallUint64(buf[492:500])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Block object
func (b *Block) SizeSSZ() (size int) {
	size = 500
	return
}

// HashTreeRoot ssz hashes the Block object
func (b *Block) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Block object with a hasher
func (b *Block) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Id'
	hh.PutUint64(uint64(b.Id))

	// Field (1) 'PrevBlock'
	hh.PutBytes(b.PrevBlock[:])

	// Field (2) 'SmartContractsRoot'
	hh.PutBytes(b.SmartContractsRoot[:])

	// Field (3) 'InMessagesRoot'
	hh.PutBytes(b.InMessagesRoot[:])

	// Field (4) 'OutMessagesRoot'
	hh.PutBytes(b.OutMessagesRoot[:])

	// Field (5) 'OutMessagesNum'
	hh.PutUint32(b.OutMessagesNum)

	// Field (6) 'ReceiptsRoot'
	hh.PutBytes(b.ReceiptsRoot[:])

	// Field (7) 'ChildBlocksRootHash'
	hh.PutBytes(b.ChildBlocksRootHash[:])

	// Field (8) 'MasterChainHash'
	hh.PutBytes(b.MasterChainHash[:])

	// Field (9) 'LogsBloom'
	hh.PutBytes(b.LogsBloom[:])

	// Field (10) 'Timestamp'
	hh.PutUint64(b.Timestamp)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Block object
func (b *Block) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
