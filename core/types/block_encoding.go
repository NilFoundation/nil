// Code generated by fastssz. DO NOT EDIT.
// Hash: e1bb82668301dd82a8d59bc965d0b6348c2331309735a4948de5b119f1006f68
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Block object
func (b *Block) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Block object to a target array
func (b *Block) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Id'
	dst = ssz.MarshalUint64(dst, b.Id)

	// Field (1) 'PrevBlock'
	dst = append(dst, b.PrevBlock[:]...)

	// Field (2) 'SmartContractsRoot'
	dst = append(dst, b.SmartContractsRoot[:]...)

	// Field (3) 'MessagesRoot'
	dst = append(dst, b.MessagesRoot[:]...)

	// Field (4) 'ReceiptsRoot'
	dst = append(dst, b.ReceiptsRoot[:]...)

	// Field (5) 'ChildBlocksRootHash'
	dst = append(dst, b.ChildBlocksRootHash[:]...)

	// Field (6) 'MasterChainHash'
	dst = append(dst, b.MasterChainHash[:]...)

	// Field (7) 'LogsBloom'
	dst = append(dst, b.LogsBloom[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Block object
func (b *Block) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 456 {
		return ssz.ErrSize
	}

	// Field (0) 'Id'
	b.Id = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'PrevBlock'
	copy(b.PrevBlock[:], buf[8:40])

	// Field (2) 'SmartContractsRoot'
	copy(b.SmartContractsRoot[:], buf[40:72])

	// Field (3) 'MessagesRoot'
	copy(b.MessagesRoot[:], buf[72:104])

	// Field (4) 'ReceiptsRoot'
	copy(b.ReceiptsRoot[:], buf[104:136])

	// Field (5) 'ChildBlocksRootHash'
	copy(b.ChildBlocksRootHash[:], buf[136:168])

	// Field (6) 'MasterChainHash'
	copy(b.MasterChainHash[:], buf[168:200])

	// Field (7) 'LogsBloom'
	copy(b.LogsBloom[:], buf[200:456])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Block object
func (b *Block) SizeSSZ() (size int) {
	size = 456
	return
}

// HashTreeRoot ssz hashes the Block object
func (b *Block) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Block object with a hasher
func (b *Block) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Id'
	hh.PutUint64(b.Id)

	// Field (1) 'PrevBlock'
	hh.PutBytes(b.PrevBlock[:])

	// Field (2) 'SmartContractsRoot'
	hh.PutBytes(b.SmartContractsRoot[:])

	// Field (3) 'MessagesRoot'
	hh.PutBytes(b.MessagesRoot[:])

	// Field (4) 'ReceiptsRoot'
	hh.PutBytes(b.ReceiptsRoot[:])

	// Field (5) 'ChildBlocksRootHash'
	hh.PutBytes(b.ChildBlocksRootHash[:])

	// Field (6) 'MasterChainHash'
	hh.PutBytes(b.MasterChainHash[:])

	// Field (7) 'LogsBloom'
	hh.PutBytes(b.LogsBloom[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Block object
func (b *Block) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
