// Code generated by fastssz. DO NOT EDIT.
// Hash: 2cde17904d4c59005a7380905c1f45c2904d16d3367ba3e70f74b38f1f635d2e
// Version: 0.1.3
package types

import (
	ssz "github.com/NilFoundation/fastssz"
)

// MarshalSSZ ssz marshals the Block object
func (b *Block) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Block object to a target array
func (b *Block) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Id'
	dst = ssz.MarshalUint64(dst, uint64(b.Id))

	// Field (1) 'PrevBlock'
	dst = append(dst, b.PrevBlock[:]...)

	// Field (2) 'SmartContractsRoot'
	dst = append(dst, b.SmartContractsRoot[:]...)

	// Field (3) 'InMessagesRoot'
	dst = append(dst, b.InMessagesRoot[:]...)

	// Field (4) 'OutMessagesRoot'
	dst = append(dst, b.OutMessagesRoot[:]...)

	// Field (5) 'OutMessagesNum'
	dst = ssz.MarshalUint64(dst, uint64(b.OutMessagesNum))

	// Field (6) 'ReceiptsRoot'
	dst = append(dst, b.ReceiptsRoot[:]...)

	// Field (7) 'ChildBlocksRootHash'
	dst = append(dst, b.ChildBlocksRootHash[:]...)

	// Field (8) 'MasterChainHash'
	dst = append(dst, b.MasterChainHash[:]...)

	// Field (9) 'LogsBloom'
	dst = append(dst, b.LogsBloom[:]...)

	// Field (10) 'Timestamp'
	dst = ssz.MarshalUint64(dst, b.Timestamp)

	return
}

// UnmarshalSSZ ssz unmarshals the Block object
func (b *Block) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 504 {
		return ssz.ErrSize
	}

	// Field (0) 'Id'
	b.Id = BlockNumber(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'PrevBlock'
	copy(b.PrevBlock[:], buf[8:40])

	// Field (2) 'SmartContractsRoot'
	copy(b.SmartContractsRoot[:], buf[40:72])

	// Field (3) 'InMessagesRoot'
	copy(b.InMessagesRoot[:], buf[72:104])

	// Field (4) 'OutMessagesRoot'
	copy(b.OutMessagesRoot[:], buf[104:136])

	// Field (5) 'OutMessagesNum'
	b.OutMessagesNum = MessageIndex(ssz.UnmarshallUint64(buf[136:144]))

	// Field (6) 'ReceiptsRoot'
	copy(b.ReceiptsRoot[:], buf[144:176])

	// Field (7) 'ChildBlocksRootHash'
	copy(b.ChildBlocksRootHash[:], buf[176:208])

	// Field (8) 'MasterChainHash'
	copy(b.MasterChainHash[:], buf[208:240])

	// Field (9) 'LogsBloom'
	copy(b.LogsBloom[:], buf[240:496])

	// Field (10) 'Timestamp'
	b.Timestamp = ssz.UnmarshallUint64(buf[496:504])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Block object
func (b *Block) SizeSSZ() (size int) {
	size = 504
	return
}

// HashTreeRoot ssz hashes the Block object
func (b *Block) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Block object with a hasher
func (b *Block) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Id'
	hh.PutUint64(uint64(b.Id))

	// Field (1) 'PrevBlock'
	hh.PutBytes(b.PrevBlock[:])

	// Field (2) 'SmartContractsRoot'
	hh.PutBytes(b.SmartContractsRoot[:])

	// Field (3) 'InMessagesRoot'
	hh.PutBytes(b.InMessagesRoot[:])

	// Field (4) 'OutMessagesRoot'
	hh.PutBytes(b.OutMessagesRoot[:])

	// Field (5) 'OutMessagesNum'
	hh.PutUint64(uint64(b.OutMessagesNum))

	// Field (6) 'ReceiptsRoot'
	hh.PutBytes(b.ReceiptsRoot[:])

	// Field (7) 'ChildBlocksRootHash'
	hh.PutBytes(b.ChildBlocksRootHash[:])

	// Field (8) 'MasterChainHash'
	hh.PutBytes(b.MasterChainHash[:])

	// Field (9) 'LogsBloom'
	hh.PutBytes(b.LogsBloom[:])

	// Field (10) 'Timestamp'
	hh.PutUint64(b.Timestamp)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Block object
func (b *Block) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
