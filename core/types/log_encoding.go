// Code generated by fastssz. DO NOT EDIT.
// Hash: 5c8ccf6786eac8ce3a55c5eabe80ee84d59224ffb8f70970b53f36e89391ce5d
// Version: 0.1.3
package types

import (
	"github.com/NilFoundation/nil/common"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Log object
func (l *Log) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the Log object to a target array
func (l *Log) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Address'
	dst = append(dst, l.Address[:]...)

	// Offset (1) 'Topics'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(l.Topics) * 32

	// Offset (2) 'Data'
	dst = ssz.WriteOffset(dst, offset)

	// Field (3) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, l.BlockNumber)

	// Field (1) 'Topics'
	if size := len(l.Topics); size > 1000 {
		err = ssz.ErrListTooBigFn("Log.Topics", size, 1000)
		return
	}
	for ii := 0; ii < len(l.Topics); ii++ {
		dst = append(dst, l.Topics[ii][:]...)
	}

	// Field (2) 'Data'
	if size := len(l.Data); size > 6000 {
		err = ssz.ErrBytesLengthFn("Log.Data", size, 6000)
		return
	}
	dst = append(dst, l.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the Log object
func (l *Log) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2 uint64

	// Field (0) 'Address'
	copy(l.Address[:], buf[0:20])

	// Offset (1) 'Topics'
	if o1 = ssz.ReadOffset(buf[20:24]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'Data'
	if o2 = ssz.ReadOffset(buf[24:28]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (3) 'BlockNumber'
	l.BlockNumber = ssz.UnmarshallUint64(buf[28:36])

	// Field (1) 'Topics'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 32, 1000)
		if err != nil {
			return err
		}
		l.Topics = make([]common.Hash, num)
		for ii := 0; ii < num; ii++ {
			copy(l.Topics[ii][:], buf[ii*32:(ii+1)*32])
		}
	}

	// Field (2) 'Data'
	{
		buf = tail[o2:]
		if len(buf) > 6000 {
			return ssz.ErrBytesLength
		}
		if cap(l.Data) == 0 {
			l.Data = make([]byte, 0, len(buf))
		}
		l.Data = append(l.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Log object
func (l *Log) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Topics'
	size += len(l.Topics) * 32

	// Field (2) 'Data'
	size += len(l.Data)

	return
}

// HashTreeRoot ssz hashes the Log object
func (l *Log) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the Log object with a hasher
func (l *Log) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(l.Address[:])

	// Field (1) 'Topics'
	{
		if size := len(l.Topics); size > 1000 {
			err = ssz.ErrListTooBigFn("Log.Topics", size, 1000)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.Topics {
			hh.Append(i[:])
		}
		numItems := uint64(len(l.Topics))
		hh.MerkleizeWithMixin(subIndx, numItems, 1000)
	}

	// Field (2) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(l.Data))
		if byteLen > 6000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(l.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (6000+31)/32)
	}

	// Field (3) 'BlockNumber'
	hh.PutUint64(l.BlockNumber)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Log object
func (l *Log) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
