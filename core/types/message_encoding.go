// Code generated by fastssz. DO NOT EDIT.
// Hash: 2aedc2130184978368cbfba61197925d78b09428a5c7856d62ad93ce85b4774b
// Version: 0.1.3
package types

import (
	ssz "github.com/NilFoundation/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(206)

	// Field (0) 'Internal'
	dst = ssz.MarshalBool(dst, m.Internal)

	// Field (1) 'Kind'
	dst = ssz.MarshalUint8(dst, uint8(m.Kind))

	// Field (2) 'ChainId'
	dst = ssz.MarshalUint64(dst, uint64(m.ChainId))

	// Field (3) 'Seqno'
	dst = ssz.MarshalUint64(dst, uint64(m.Seqno))

	// Field (4) 'GasPrice'
	if dst, err = m.GasPrice.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'GasLimit'
	if dst, err = m.GasLimit.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'From'
	dst = append(dst, m.From[:]...)

	// Field (7) 'To'
	dst = append(dst, m.To[:]...)

	// Field (8) 'RefundTo'
	dst = append(dst, m.RefundTo[:]...)

	// Field (9) 'BounceTo'
	dst = append(dst, m.BounceTo[:]...)

	// Field (10) 'Value'
	if dst, err = m.Value.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (11) 'Currency'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Currency) * 64

	// Offset (12) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Data)

	// Offset (13) 'Signature'
	dst = ssz.WriteOffset(dst, offset)

	// Field (11) 'Currency'
	if size := len(m.Currency); size > 256 {
		err = ssz.ErrListTooBigFn("Message.Currency", size, 256)
		return
	}
	for ii := 0; ii < len(m.Currency); ii++ {
		if dst, err = m.Currency[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (12) 'Data'
	if size := len(m.Data); size > 24576 {
		err = ssz.ErrBytesLengthFn("Message.Data", size, 24576)
		return
	}
	dst = append(dst, m.Data...)

	// Field (13) 'Signature'
	if size := len(m.Signature); size > 256 {
		err = ssz.ErrBytesLengthFn("Message.Signature", size, 256)
		return
	}
	dst = append(dst, m.Signature...)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 206 {
		return ssz.ErrSize
	}

	tail := buf
	var o11, o12, o13 uint64

	// Field (0) 'Internal'
	m.Internal = ssz.UnmarshalBool(buf[0:1])

	// Field (1) 'Kind'
	m.Kind = MessageKind(ssz.UnmarshallUint8(buf[1:2]))

	// Field (2) 'ChainId'
	m.ChainId = ChainId(ssz.UnmarshallUint64(buf[2:10]))

	// Field (3) 'Seqno'
	m.Seqno = Seqno(ssz.UnmarshallUint64(buf[10:18]))

	// Field (4) 'GasPrice'
	if err = m.GasPrice.UnmarshalSSZ(buf[18:50]); err != nil {
		return err
	}

	// Field (5) 'GasLimit'
	if err = m.GasLimit.UnmarshalSSZ(buf[50:82]); err != nil {
		return err
	}

	// Field (6) 'From'
	copy(m.From[:], buf[82:102])

	// Field (7) 'To'
	copy(m.To[:], buf[102:122])

	// Field (8) 'RefundTo'
	copy(m.RefundTo[:], buf[122:142])

	// Field (9) 'BounceTo'
	copy(m.BounceTo[:], buf[142:162])

	// Field (10) 'Value'
	if err = m.Value.UnmarshalSSZ(buf[162:194]); err != nil {
		return err
	}

	// Offset (11) 'Currency'
	if o11 = ssz.ReadOffset(buf[194:198]); o11 > size {
		return ssz.ErrOffset
	}

	if o11 < 206 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (12) 'Data'
	if o12 = ssz.ReadOffset(buf[198:202]); o12 > size || o11 > o12 {
		return ssz.ErrOffset
	}

	// Offset (13) 'Signature'
	if o13 = ssz.ReadOffset(buf[202:206]); o13 > size || o12 > o13 {
		return ssz.ErrOffset
	}

	// Field (11) 'Currency'
	{
		buf = tail[o11:o12]
		num, err := ssz.DivideInt2(len(buf), 64, 256)
		if err != nil {
			return err
		}
		m.Currency = make([]CurrencyBalance, num)
		for ii := 0; ii < num; ii++ {
			if err = m.Currency[ii].UnmarshalSSZ(buf[ii*64 : (ii+1)*64]); err != nil {
				return err
			}
		}
	}

	// Field (12) 'Data'
	{
		buf = tail[o12:o13]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}

	// Field (13) 'Signature'
	{
		buf = tail[o13:]
		if len(buf) > 256 {
			return ssz.ErrBytesLength
		}
		if cap(m.Signature) == 0 {
			m.Signature = make([]byte, 0, len(buf))
		}
		m.Signature = append(m.Signature, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 206

	// Field (11) 'Currency'
	size += len(m.Currency) * 64

	// Field (12) 'Data'
	size += len(m.Data)

	// Field (13) 'Signature'
	size += len(m.Signature)

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Internal'
	hh.PutBool(m.Internal)

	// Field (1) 'Kind'
	hh.PutUint8(uint8(m.Kind))

	// Field (2) 'ChainId'
	hh.PutUint64(uint64(m.ChainId))

	// Field (3) 'Seqno'
	hh.PutUint64(uint64(m.Seqno))

	// Field (4) 'GasPrice'
	if err = m.GasPrice.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'GasLimit'
	if err = m.GasLimit.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'From'
	hh.PutBytes(m.From[:])

	// Field (7) 'To'
	hh.PutBytes(m.To[:])

	// Field (8) 'RefundTo'
	hh.PutBytes(m.RefundTo[:])

	// Field (9) 'BounceTo'
	hh.PutBytes(m.BounceTo[:])

	// Field (10) 'Value'
	if err = m.Value.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (11) 'Currency'
	{
		subIndx := hh.Index()
		num := uint64(len(m.Currency))
		if num > 256 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range m.Currency {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 256)
	}

	// Field (12) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	// Field (13) 'Signature'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Signature))
		if byteLen > 256 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(m.Signature)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (256+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the ExternalMessage object
func (e *ExternalMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExternalMessage object to a target array
func (e *ExternalMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(45)

	// Field (0) 'Kind'
	dst = ssz.MarshalUint8(dst, uint8(e.Kind))

	// Field (1) 'To'
	dst = append(dst, e.To[:]...)

	// Field (2) 'ChainId'
	dst = ssz.MarshalUint64(dst, uint64(e.ChainId))

	// Field (3) 'Seqno'
	dst = ssz.MarshalUint64(dst, uint64(e.Seqno))

	// Offset (4) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.Data)

	// Offset (5) 'AuthData'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'Data'
	if size := len(e.Data); size > 24576 {
		err = ssz.ErrBytesLengthFn("ExternalMessage.Data", size, 24576)
		return
	}
	dst = append(dst, e.Data...)

	// Field (5) 'AuthData'
	if size := len(e.AuthData); size > 256 {
		err = ssz.ErrBytesLengthFn("ExternalMessage.AuthData", size, 256)
		return
	}
	dst = append(dst, e.AuthData...)

	return
}

// UnmarshalSSZ ssz unmarshals the ExternalMessage object
func (e *ExternalMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 45 {
		return ssz.ErrSize
	}

	tail := buf
	var o4, o5 uint64

	// Field (0) 'Kind'
	e.Kind = MessageKind(ssz.UnmarshallUint8(buf[0:1]))

	// Field (1) 'To'
	copy(e.To[:], buf[1:21])

	// Field (2) 'ChainId'
	e.ChainId = ChainId(ssz.UnmarshallUint64(buf[21:29]))

	// Field (3) 'Seqno'
	e.Seqno = Seqno(ssz.UnmarshallUint64(buf[29:37]))

	// Offset (4) 'Data'
	if o4 = ssz.ReadOffset(buf[37:41]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 45 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (5) 'AuthData'
	if o5 = ssz.ReadOffset(buf[41:45]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (4) 'Data'
	{
		buf = tail[o4:o5]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(e.Data) == 0 {
			e.Data = make([]byte, 0, len(buf))
		}
		e.Data = append(e.Data, buf...)
	}

	// Field (5) 'AuthData'
	{
		buf = tail[o5:]
		if len(buf) > 256 {
			return ssz.ErrBytesLength
		}
		if cap(e.AuthData) == 0 {
			e.AuthData = make([]byte, 0, len(buf))
		}
		e.AuthData = append(e.AuthData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExternalMessage object
func (e *ExternalMessage) SizeSSZ() (size int) {
	size = 45

	// Field (4) 'Data'
	size += len(e.Data)

	// Field (5) 'AuthData'
	size += len(e.AuthData)

	return
}

// HashTreeRoot ssz hashes the ExternalMessage object
func (e *ExternalMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExternalMessage object with a hasher
func (e *ExternalMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Kind'
	hh.PutUint8(uint8(e.Kind))

	// Field (1) 'To'
	hh.PutBytes(e.To[:])

	// Field (2) 'ChainId'
	hh.PutUint64(uint64(e.ChainId))

	// Field (3) 'Seqno'
	hh.PutUint64(uint64(e.Seqno))

	// Field (4) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.Data))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	// Field (5) 'AuthData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.AuthData))
		if byteLen > 256 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.AuthData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (256+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExternalMessage object
func (e *ExternalMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the InternalMessagePayload object
func (i *InternalMessagePayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the InternalMessagePayload object to a target array
func (i *InternalMessagePayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(133)

	// Field (0) 'Kind'
	dst = ssz.MarshalUint8(dst, uint8(i.Kind))

	// Field (1) 'GasLimit'
	if dst, err = i.GasLimit.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'To'
	dst = append(dst, i.To[:]...)

	// Field (3) 'RefundTo'
	dst = append(dst, i.RefundTo[:]...)

	// Field (4) 'BounceTo'
	dst = append(dst, i.BounceTo[:]...)

	// Offset (5) 'Currency'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.Currency) * 64

	// Field (6) 'Value'
	if dst, err = i.Value.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (7) 'Data'
	dst = ssz.WriteOffset(dst, offset)

	// Field (5) 'Currency'
	if size := len(i.Currency); size > 256 {
		err = ssz.ErrListTooBigFn("InternalMessagePayload.Currency", size, 256)
		return
	}
	for ii := 0; ii < len(i.Currency); ii++ {
		if dst, err = i.Currency[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (7) 'Data'
	if size := len(i.Data); size > 24576 {
		err = ssz.ErrBytesLengthFn("InternalMessagePayload.Data", size, 24576)
		return
	}
	dst = append(dst, i.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the InternalMessagePayload object
func (i *InternalMessagePayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 133 {
		return ssz.ErrSize
	}

	tail := buf
	var o5, o7 uint64

	// Field (0) 'Kind'
	i.Kind = MessageKind(ssz.UnmarshallUint8(buf[0:1]))

	// Field (1) 'GasLimit'
	if err = i.GasLimit.UnmarshalSSZ(buf[1:33]); err != nil {
		return err
	}

	// Field (2) 'To'
	copy(i.To[:], buf[33:53])

	// Field (3) 'RefundTo'
	copy(i.RefundTo[:], buf[53:73])

	// Field (4) 'BounceTo'
	copy(i.BounceTo[:], buf[73:93])

	// Offset (5) 'Currency'
	if o5 = ssz.ReadOffset(buf[93:97]); o5 > size {
		return ssz.ErrOffset
	}

	if o5 < 133 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (6) 'Value'
	if err = i.Value.UnmarshalSSZ(buf[97:129]); err != nil {
		return err
	}

	// Offset (7) 'Data'
	if o7 = ssz.ReadOffset(buf[129:133]); o7 > size || o5 > o7 {
		return ssz.ErrOffset
	}

	// Field (5) 'Currency'
	{
		buf = tail[o5:o7]
		num, err := ssz.DivideInt2(len(buf), 64, 256)
		if err != nil {
			return err
		}
		i.Currency = make([]CurrencyBalance, num)
		for ii := 0; ii < num; ii++ {
			if err = i.Currency[ii].UnmarshalSSZ(buf[ii*64 : (ii+1)*64]); err != nil {
				return err
			}
		}
	}

	// Field (7) 'Data'
	{
		buf = tail[o7:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(i.Data) == 0 {
			i.Data = make([]byte, 0, len(buf))
		}
		i.Data = append(i.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the InternalMessagePayload object
func (i *InternalMessagePayload) SizeSSZ() (size int) {
	size = 133

	// Field (5) 'Currency'
	size += len(i.Currency) * 64

	// Field (7) 'Data'
	size += len(i.Data)

	return
}

// HashTreeRoot ssz hashes the InternalMessagePayload object
func (i *InternalMessagePayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the InternalMessagePayload object with a hasher
func (i *InternalMessagePayload) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Kind'
	hh.PutUint8(uint8(i.Kind))

	// Field (1) 'GasLimit'
	if err = i.GasLimit.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'To'
	hh.PutBytes(i.To[:])

	// Field (3) 'RefundTo'
	hh.PutBytes(i.RefundTo[:])

	// Field (4) 'BounceTo'
	hh.PutBytes(i.BounceTo[:])

	// Field (5) 'Currency'
	{
		subIndx := hh.Index()
		num := uint64(len(i.Currency))
		if num > 256 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range i.Currency {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 256)
	}

	// Field (6) 'Value'
	if err = i.Value.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (7) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(i.Data))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(i.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the InternalMessagePayload object
func (i *InternalMessagePayload) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}

// MarshalSSZ ssz marshals the messageDigest object
func (m *messageDigest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the messageDigest object to a target array
func (m *messageDigest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(41)

	// Field (0) 'Kind'
	dst = ssz.MarshalUint8(dst, uint8(m.Kind))

	// Field (1) 'To'
	dst = append(dst, m.To[:]...)

	// Field (2) 'ChainId'
	dst = ssz.MarshalUint64(dst, uint64(m.ChainId))

	// Field (3) 'Seqno'
	dst = ssz.MarshalUint64(dst, uint64(m.Seqno))

	// Offset (4) 'Data'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'Data'
	if size := len(m.Data); size > 24576 {
		err = ssz.ErrBytesLengthFn("messageDigest.Data", size, 24576)
		return
	}
	dst = append(dst, m.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the messageDigest object
func (m *messageDigest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 41 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'Kind'
	m.Kind = MessageKind(ssz.UnmarshallUint8(buf[0:1]))

	// Field (1) 'To'
	copy(m.To[:], buf[1:21])

	// Field (2) 'ChainId'
	m.ChainId = ChainId(ssz.UnmarshallUint64(buf[21:29]))

	// Field (3) 'Seqno'
	m.Seqno = Seqno(ssz.UnmarshallUint64(buf[29:37]))

	// Offset (4) 'Data'
	if o4 = ssz.ReadOffset(buf[37:41]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 41 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'Data'
	{
		buf = tail[o4:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the messageDigest object
func (m *messageDigest) SizeSSZ() (size int) {
	size = 41

	// Field (4) 'Data'
	size += len(m.Data)

	return
}

// HashTreeRoot ssz hashes the messageDigest object
func (m *messageDigest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the messageDigest object with a hasher
func (m *messageDigest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Kind'
	hh.PutUint8(uint8(m.Kind))

	// Field (1) 'To'
	hh.PutBytes(m.To[:])

	// Field (2) 'ChainId'
	hh.PutUint64(uint64(m.ChainId))

	// Field (3) 'Seqno'
	hh.PutUint64(uint64(m.Seqno))

	// Field (4) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the messageDigest object
func (m *messageDigest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}
