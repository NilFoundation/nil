// Code generated by fastssz. DO NOT EDIT.
// Hash: 56c952a26ca15f698a9871ce4618a8d4509be5738e44268a39d38823d1da78be
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(104)

	// Field (0) 'Index'
	dst = ssz.MarshalUint64(dst, m.Index)

	// Field (1) 'ShardId'
	dst = ssz.MarshalUint64(dst, uint64(m.ShardId))

	// Field (2) 'From'
	dst = append(dst, m.From[:]...)

	// Field (3) 'To'
	dst = append(dst, m.To[:]...)

	// Offset (4) 'Value'
	dst = ssz.WriteOffset(dst, offset)
	offset += m.Value.SizeSSZ()

	// Offset (5) 'Data'
	dst = ssz.WriteOffset(dst, offset)

	// Field (6) 'Seqno'
	dst = ssz.MarshalUint64(dst, m.Seqno)

	// Field (7) 'Signature'
	dst = append(dst, m.Signature[:]...)

	// Field (4) 'Value'
	if dst, err = m.Value.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'Data'
	if size := len(m.Data); size > 10000 {
		err = ssz.ErrBytesLengthFn("Message.Data", size, 10000)
		return
	}
	dst = append(dst, m.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 104 {
		return ssz.ErrSize
	}

	tail := buf
	var o4, o5 uint64

	// Field (0) 'Index'
	m.Index = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ShardId'
	m.ShardId = ShardId(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'From'
	copy(m.From[:], buf[16:36])

	// Field (3) 'To'
	copy(m.To[:], buf[36:56])

	// Offset (4) 'Value'
	if o4 = ssz.ReadOffset(buf[56:60]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 104 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (5) 'Data'
	if o5 = ssz.ReadOffset(buf[60:64]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (6) 'Seqno'
	m.Seqno = ssz.UnmarshallUint64(buf[64:72])

	// Field (7) 'Signature'
	copy(m.Signature[:], buf[72:104])

	// Field (4) 'Value'
	{
		buf = tail[o4:o5]
		if err = m.Value.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'Data'
	{
		buf = tail[o5:]
		if len(buf) > 10000 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 104

	// Field (4) 'Value'
	size += m.Value.SizeSSZ()

	// Field (5) 'Data'
	size += len(m.Data)

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Index'
	hh.PutUint64(m.Index)

	// Field (1) 'ShardId'
	hh.PutUint64(uint64(m.ShardId))

	// Field (2) 'From'
	hh.PutBytes(m.From[:])

	// Field (3) 'To'
	hh.PutBytes(m.To[:])

	// Field (4) 'Value'
	if err = m.Value.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 10000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (10000+31)/32)
	}

	// Field (6) 'Seqno'
	hh.PutUint64(m.Seqno)

	// Field (7) 'Signature'
	hh.PutBytes(m.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}
