// Code generated by fastssz. DO NOT EDIT.
// Hash: 0bec59f7be2189006cdd7f3b80e859ee96cea14d2373966daf13be985c6aba3d
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(213)

	// Field (0) 'Seqno'
	dst = ssz.MarshalUint64(dst, m.Seqno)

	// Field (1) 'GasPrice'
	if dst, err = m.GasPrice.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'GasLimit'
	if dst, err = m.GasLimit.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'From'
	dst = append(dst, m.From[:]...)

	// Field (4) 'To'
	dst = append(dst, m.To[:]...)

	// Field (5) 'Value'
	if dst, err = m.Value.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (6) 'Data'
	dst = ssz.WriteOffset(dst, offset)

	// Field (7) 'Signature'
	dst = append(dst, m.Signature[:]...)

	// Field (6) 'Data'
	if size := len(m.Data); size > 24576 {
		err = ssz.ErrBytesLengthFn("Message.Data", size, 24576)
		return
	}
	dst = append(dst, m.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 213 {
		return ssz.ErrSize
	}

	tail := buf
	var o6 uint64

	// Field (0) 'Seqno'
	m.Seqno = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'GasPrice'
	if err = m.GasPrice.UnmarshalSSZ(buf[8:40]); err != nil {
		return err
	}

	// Field (2) 'GasLimit'
	if err = m.GasLimit.UnmarshalSSZ(buf[40:72]); err != nil {
		return err
	}

	// Field (3) 'From'
	copy(m.From[:], buf[72:92])

	// Field (4) 'To'
	copy(m.To[:], buf[92:112])

	// Field (5) 'Value'
	if err = m.Value.UnmarshalSSZ(buf[112:144]); err != nil {
		return err
	}

	// Offset (6) 'Data'
	if o6 = ssz.ReadOffset(buf[144:148]); o6 > size {
		return ssz.ErrOffset
	}

	if o6 < 213 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (7) 'Signature'
	copy(m.Signature[:], buf[148:213])

	// Field (6) 'Data'
	{
		buf = tail[o6:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 213

	// Field (6) 'Data'
	size += len(m.Data)

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Seqno'
	hh.PutUint64(m.Seqno)

	// Field (1) 'GasPrice'
	if err = m.GasPrice.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'GasLimit'
	if err = m.GasLimit.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'From'
	hh.PutBytes(m.From[:])

	// Field (4) 'To'
	hh.PutBytes(m.To[:])

	// Field (5) 'Value'
	if err = m.Value.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	// Field (7) 'Signature'
	hh.PutBytes(m.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the messageDigest object
func (m *messageDigest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the messageDigest object to a target array
func (m *messageDigest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(148)

	// Field (0) 'Seqno'
	dst = ssz.MarshalUint64(dst, m.Seqno)

	// Field (1) 'GasPrice'
	if dst, err = m.GasPrice.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'GasLimit'
	if dst, err = m.GasLimit.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'From'
	dst = append(dst, m.From[:]...)

	// Field (4) 'To'
	dst = append(dst, m.To[:]...)

	// Field (5) 'Value'
	if dst, err = m.Value.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (6) 'Data'
	dst = ssz.WriteOffset(dst, offset)

	// Field (6) 'Data'
	if size := len(m.Data); size > 24576 {
		err = ssz.ErrBytesLengthFn("messageDigest.Data", size, 24576)
		return
	}
	dst = append(dst, m.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the messageDigest object
func (m *messageDigest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 148 {
		return ssz.ErrSize
	}

	tail := buf
	var o6 uint64

	// Field (0) 'Seqno'
	m.Seqno = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'GasPrice'
	if err = m.GasPrice.UnmarshalSSZ(buf[8:40]); err != nil {
		return err
	}

	// Field (2) 'GasLimit'
	if err = m.GasLimit.UnmarshalSSZ(buf[40:72]); err != nil {
		return err
	}

	// Field (3) 'From'
	copy(m.From[:], buf[72:92])

	// Field (4) 'To'
	copy(m.To[:], buf[92:112])

	// Field (5) 'Value'
	if err = m.Value.UnmarshalSSZ(buf[112:144]); err != nil {
		return err
	}

	// Offset (6) 'Data'
	if o6 = ssz.ReadOffset(buf[144:148]); o6 > size {
		return ssz.ErrOffset
	}

	if o6 < 148 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (6) 'Data'
	{
		buf = tail[o6:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the messageDigest object
func (m *messageDigest) SizeSSZ() (size int) {
	size = 148

	// Field (6) 'Data'
	size += len(m.Data)

	return
}

// HashTreeRoot ssz hashes the messageDigest object
func (m *messageDigest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the messageDigest object with a hasher
func (m *messageDigest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Seqno'
	hh.PutUint64(m.Seqno)

	// Field (1) 'GasPrice'
	if err = m.GasPrice.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'GasLimit'
	if err = m.GasLimit.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'From'
	hh.PutBytes(m.From[:])

	// Field (4) 'To'
	hh.PutBytes(m.To[:])

	// Field (5) 'Value'
	if err = m.Value.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the messageDigest object
func (m *messageDigest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}
