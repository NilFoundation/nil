// Code generated by fastssz. DO NOT EDIT.
// Hash: e3228c46ba60cf36604c6791bf45e839cd23e69a313a903cb63791a52ffb16be
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the DeployMessage object
func (d *DeployMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DeployMessage object to a target array
func (d *DeployMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(49)

	// Field (0) 'ShardId'
	dst = ssz.MarshalUint32(dst, uint32(d.ShardId))

	// Field (1) 'Seqno'
	dst = ssz.MarshalUint64(dst, d.Seqno)

	// Field (2) 'PublicKey'
	dst = append(dst, d.PublicKey[:]...)

	// Offset (3) 'Code'
	dst = ssz.WriteOffset(dst, offset)

	// Field (3) 'Code'
	if size := len(d.Code); size > 24576 {
		err = ssz.ErrBytesLengthFn("DeployMessage.Code", size, 24576)
		return
	}
	dst = append(dst, d.Code...)

	return
}

// UnmarshalSSZ ssz unmarshals the DeployMessage object
func (d *DeployMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 49 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'ShardId'
	d.ShardId = ShardId(ssz.UnmarshallUint32(buf[0:4]))

	// Field (1) 'Seqno'
	d.Seqno = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'PublicKey'
	copy(d.PublicKey[:], buf[12:45])

	// Offset (3) 'Code'
	if o3 = ssz.ReadOffset(buf[45:49]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 49 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'Code'
	{
		buf = tail[o3:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(d.Code) == 0 {
			d.Code = make([]byte, 0, len(buf))
		}
		d.Code = append(d.Code, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DeployMessage object
func (d *DeployMessage) SizeSSZ() (size int) {
	size = 49

	// Field (3) 'Code'
	size += len(d.Code)

	return
}

// HashTreeRoot ssz hashes the DeployMessage object
func (d *DeployMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DeployMessage object with a hasher
func (d *DeployMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ShardId'
	hh.PutUint32(uint32(d.ShardId))

	// Field (1) 'Seqno'
	hh.PutUint64(d.Seqno)

	// Field (2) 'PublicKey'
	hh.PutBytes(d.PublicKey[:])

	// Field (3) 'Code'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.Code))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(d.Code)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the DeployMessage object
func (d *DeployMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}
