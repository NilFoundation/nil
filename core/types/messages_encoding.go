// Code generated by fastssz. DO NOT EDIT.
// Hash: 2102adc3bd68ed51fa7fe2af7f859d8abd50a119962a8582a43a336da5bb9acf
// Version: 0.1.3
package types

import (
	ssz "github.com/NilFoundation/fastssz"
)

// MarshalSSZ ssz marshals the DeployMessage object
func (d *DeployMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DeployMessage object to a target array
func (d *DeployMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Code'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Code'
	if size := len(d.Code); size > 24576 {
		err = ssz.ErrBytesLengthFn("DeployMessage.Code", size, 24576)
		return
	}
	dst = append(dst, d.Code...)

	return
}

// UnmarshalSSZ ssz unmarshals the DeployMessage object
func (d *DeployMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Code'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Code'
	{
		buf = tail[o0:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(d.Code) == 0 {
			d.Code = make([]byte, 0, len(buf))
		}
		d.Code = append(d.Code, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DeployMessage object
func (d *DeployMessage) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Code'
	size += len(d.Code)

	return
}

// HashTreeRoot ssz hashes the DeployMessage object
func (d *DeployMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DeployMessage object with a hasher
func (d *DeployMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Code'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.Code))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(d.Code)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the DeployMessage object
func (d *DeployMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}

// MarshalSSZ ssz marshals the AddressSourceData object
func (a *AddressSourceData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AddressSourceData object to a target array
func (a *AddressSourceData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Code'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Salt'
	dst = ssz.MarshalUint64(dst, a.Salt)

	// Field (0) 'Code'
	if size := len(a.Code); size > 24576 {
		err = ssz.ErrBytesLengthFn("AddressSourceData.Code", size, 24576)
		return
	}
	dst = append(dst, a.Code...)

	return
}

// UnmarshalSSZ ssz unmarshals the AddressSourceData object
func (a *AddressSourceData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Code'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Salt'
	a.Salt = ssz.UnmarshallUint64(buf[4:12])

	// Field (0) 'Code'
	{
		buf = tail[o0:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(a.Code) == 0 {
			a.Code = make([]byte, 0, len(buf))
		}
		a.Code = append(a.Code, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AddressSourceData object
func (a *AddressSourceData) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Code'
	size += len(a.Code)

	return
}

// HashTreeRoot ssz hashes the AddressSourceData object
func (a *AddressSourceData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AddressSourceData object with a hasher
func (a *AddressSourceData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Code'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(a.Code))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(a.Code)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	// Field (1) 'Salt'
	hh.PutUint64(a.Salt)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AddressSourceData object
func (a *AddressSourceData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
