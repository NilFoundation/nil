// Code generated by fastssz. DO NOT EDIT.
// Hash: 8e0ddb14900335fe72a7773dd15cd6d4b88a43fe671a31152bb0cdb9481dd547
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Receipt object
func (r *Receipt) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the Receipt object to a target array
func (r *Receipt) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(369)

	// Field (0) 'Success'
	dst = ssz.MarshalBool(dst, r.Success)

	// Field (1) 'GasUsed'
	dst = ssz.MarshalUint32(dst, r.GasUsed)

	// Field (2) 'Bloom'
	dst = append(dst, r.Bloom[:]...)

	// Offset (3) 'Logs'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'OutMsgIndex'
	dst = ssz.MarshalUint32(dst, r.OutMsgIndex)

	// Field (5) 'MsgHash'
	dst = append(dst, r.MsgHash[:]...)

	// Field (6) 'ContractAddress'
	dst = append(dst, r.ContractAddress[:]...)

	// Field (7) 'BlockHash'
	dst = append(dst, r.BlockHash[:]...)

	// Field (8) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, uint64(r.BlockNumber))

	// Field (9) 'MsgIndex'
	dst = ssz.MarshalUint64(dst, r.MsgIndex)

	// Field (3) 'Logs'
	if size := len(r.Logs); size > 1000 {
		err = ssz.ErrListTooBigFn("Receipt.Logs", size, 1000)
		return
	}
	{
		offset = 4 * len(r.Logs)
		for ii := 0; ii < len(r.Logs); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += r.Logs[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(r.Logs); ii++ {
		if dst, err = r.Logs[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Receipt object
func (r *Receipt) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 369 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'Success'
	r.Success = ssz.UnmarshalBool(buf[0:1])

	// Field (1) 'GasUsed'
	r.GasUsed = ssz.UnmarshallUint32(buf[1:5])

	// Field (2) 'Bloom'
	copy(r.Bloom[:], buf[5:261])

	// Offset (3) 'Logs'
	if o3 = ssz.ReadOffset(buf[261:265]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 369 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'OutMsgIndex'
	r.OutMsgIndex = ssz.UnmarshallUint32(buf[265:269])

	// Field (5) 'MsgHash'
	copy(r.MsgHash[:], buf[269:301])

	// Field (6) 'ContractAddress'
	copy(r.ContractAddress[:], buf[301:321])

	// Field (7) 'BlockHash'
	copy(r.BlockHash[:], buf[321:353])

	// Field (8) 'BlockNumber'
	r.BlockNumber = BlockNumber(ssz.UnmarshallUint64(buf[353:361]))

	// Field (9) 'MsgIndex'
	r.MsgIndex = ssz.UnmarshallUint64(buf[361:369])

	// Field (3) 'Logs'
	{
		buf = tail[o3:]
		num, err := ssz.DecodeDynamicLength(buf, 1000)
		if err != nil {
			return err
		}
		r.Logs = make([]*Log, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if r.Logs[indx] == nil {
				r.Logs[indx] = new(Log)
			}
			if err = r.Logs[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Receipt object
func (r *Receipt) SizeSSZ() (size int) {
	size = 369

	// Field (3) 'Logs'
	for ii := 0; ii < len(r.Logs); ii++ {
		size += 4
		size += r.Logs[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the Receipt object
func (r *Receipt) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the Receipt object with a hasher
func (r *Receipt) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Success'
	hh.PutBool(r.Success)

	// Field (1) 'GasUsed'
	hh.PutUint32(r.GasUsed)

	// Field (2) 'Bloom'
	hh.PutBytes(r.Bloom[:])

	// Field (3) 'Logs'
	{
		subIndx := hh.Index()
		num := uint64(len(r.Logs))
		if num > 1000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range r.Logs {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1000)
	}

	// Field (4) 'OutMsgIndex'
	hh.PutUint32(r.OutMsgIndex)

	// Field (5) 'MsgHash'
	hh.PutBytes(r.MsgHash[:])

	// Field (6) 'ContractAddress'
	hh.PutBytes(r.ContractAddress[:])

	// Field (7) 'BlockHash'
	hh.PutBytes(r.BlockHash[:])

	// Field (8) 'BlockNumber'
	hh.PutUint64(uint64(r.BlockNumber))

	// Field (9) 'MsgIndex'
	hh.PutUint64(r.MsgIndex)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Receipt object
func (r *Receipt) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(r)
}
