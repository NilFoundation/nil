// Code generated by fastssz. DO NOT EDIT.
// Hash: 2ac6764e1f54631afeb9162d290a4f899df0fb86474dc7c67478e081a02d4722
// Version: 0.1.3
package types

import (
	ssz "github.com/NilFoundation/fastssz"
)

// MarshalSSZ ssz marshals the Neighbor object
func (n *Neighbor) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the Neighbor object to a target array
func (n *Neighbor) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ShardId'
	dst = ssz.MarshalUint32(dst, uint32(n.ShardId))

	// Field (1) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, uint64(n.BlockNumber))

	// Field (2) 'MessageIndex'
	dst = ssz.MarshalUint64(dst, uint64(n.MessageIndex))

	return
}

// UnmarshalSSZ ssz unmarshals the Neighbor object
func (n *Neighbor) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 20 {
		return ssz.ErrSize
	}

	// Field (0) 'ShardId'
	n.ShardId = ShardId(ssz.UnmarshallUint32(buf[0:4]))

	// Field (1) 'BlockNumber'
	n.BlockNumber = BlockNumber(ssz.UnmarshallUint64(buf[4:12]))

	// Field (2) 'MessageIndex'
	n.MessageIndex = MessageIndex(ssz.UnmarshallUint64(buf[12:20]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Neighbor object
func (n *Neighbor) SizeSSZ() (size int) {
	size = 20
	return
}

// HashTreeRoot ssz hashes the Neighbor object
func (n *Neighbor) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(n)
}

// HashTreeRootWith ssz hashes the Neighbor object with a hasher
func (n *Neighbor) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ShardId'
	hh.PutUint32(uint32(n.ShardId))

	// Field (1) 'BlockNumber'
	hh.PutUint64(uint64(n.BlockNumber))

	// Field (2) 'MessageIndex'
	hh.PutUint64(uint64(n.MessageIndex))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Neighbor object
func (n *Neighbor) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(n)
}

// MarshalSSZ ssz marshals the CollatorState object
func (c *CollatorState) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CollatorState object to a target array
func (c *CollatorState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Neighbors'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Neighbors'
	if size := len(c.Neighbors); size > 10000 {
		err = ssz.ErrListTooBigFn("CollatorState.Neighbors", size, 10000)
		return
	}
	for ii := 0; ii < len(c.Neighbors); ii++ {
		if dst, err = c.Neighbors[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the CollatorState object
func (c *CollatorState) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Neighbors'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Neighbors'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 20, 10000)
		if err != nil {
			return err
		}
		c.Neighbors = make([]Neighbor, num)
		for ii := 0; ii < num; ii++ {
			if err = c.Neighbors[ii].UnmarshalSSZ(buf[ii*20 : (ii+1)*20]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CollatorState object
func (c *CollatorState) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Neighbors'
	size += len(c.Neighbors) * 20

	return
}

// HashTreeRoot ssz hashes the CollatorState object
func (c *CollatorState) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CollatorState object with a hasher
func (c *CollatorState) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Neighbors'
	{
		subIndx := hh.Index()
		num := uint64(len(c.Neighbors))
		if num > 10000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.Neighbors {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 10000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CollatorState object
func (c *CollatorState) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
