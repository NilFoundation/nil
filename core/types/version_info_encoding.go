// Code generated by fastssz. DO NOT EDIT.
// Hash: ff673edfd84b5712ffe00db28d0f43314b5a702b51c941d9455b04653c07ca5f
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the VersionInfo object
func (v *VersionInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the VersionInfo object to a target array
func (v *VersionInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Version'
	dst = append(dst, v.Version[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the VersionInfo object
func (v *VersionInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Version'
	copy(v.Version[:], buf[0:32])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VersionInfo object
func (v *VersionInfo) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the VersionInfo object
func (v *VersionInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the VersionInfo object with a hasher
func (v *VersionInfo) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Version'
	hh.PutBytes(v.Version[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the VersionInfo object
func (v *VersionInfo) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
