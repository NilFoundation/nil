// Code generated by fastssz. DO NOT EDIT.
// Hash: 6a062dc1826e2f2575b724e0d32bc8e2ab53e4f045ed8b7cba40cbd88fa61ce5
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SmartContract object
func (s *SmartContract) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SmartContract object to a target array
func (s *SmartContract) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(97)

	// Field (0) 'Address'
	dst = append(dst, s.Address[:]...)

	// Field (1) 'Initialised'
	dst = ssz.MarshalBool(dst, s.Initialised)

	// Offset (2) 'Balance'
	dst = ssz.WriteOffset(dst, offset)

	// Field (3) 'StorageRoot'
	dst = append(dst, s.StorageRoot[:]...)

	// Field (4) 'CodeHash'
	dst = append(dst, s.CodeHash[:]...)

	// Field (5) 'Seqno'
	dst = ssz.MarshalUint64(dst, s.Seqno)

	// Field (2) 'Balance'
	if dst, err = s.Balance.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SmartContract object
func (s *SmartContract) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 97 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Address'
	copy(s.Address[:], buf[0:20])

	// Field (1) 'Initialised'
	s.Initialised = ssz.UnmarshalBool(buf[20:21])

	// Offset (2) 'Balance'
	if o2 = ssz.ReadOffset(buf[21:25]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 97 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'StorageRoot'
	copy(s.StorageRoot[:], buf[25:57])

	// Field (4) 'CodeHash'
	copy(s.CodeHash[:], buf[57:89])

	// Field (5) 'Seqno'
	s.Seqno = ssz.UnmarshallUint64(buf[89:97])

	// Field (2) 'Balance'
	{
		buf = tail[o2:]
		if err = s.Balance.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SmartContract object
func (s *SmartContract) SizeSSZ() (size int) {
	size = 97

	// Field (2) 'Balance'
	size += s.Balance.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SmartContract object
func (s *SmartContract) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SmartContract object with a hasher
func (s *SmartContract) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(s.Address[:])

	// Field (1) 'Initialised'
	hh.PutBool(s.Initialised)

	// Field (2) 'Balance'
	if err = s.Balance.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'StorageRoot'
	hh.PutBytes(s.StorageRoot[:])

	// Field (4) 'CodeHash'
	hh.PutBytes(s.CodeHash[:])

	// Field (5) 'Seqno'
	hh.PutUint64(s.Seqno)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SmartContract object
func (s *SmartContract) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
