// Code generated by fastssz. DO NOT EDIT.
// Hash: f23fb8df12afb6ff98a1067a2ecbe161e311adf3ba1de8da5038f164ddf35434
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SmartContract object
func (s *SmartContract) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SmartContract object to a target array
func (s *SmartContract) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Address'
	dst = append(dst, s.Address[:]...)

	// Field (1) 'Initialised'
	dst = ssz.MarshalBool(dst, s.Initialised)

	// Field (2) 'Balance'
	if dst, err = s.Balance.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'StorageRoot'
	dst = append(dst, s.StorageRoot[:]...)

	// Field (4) 'CodeHash'
	dst = append(dst, s.CodeHash[:]...)

	// Field (5) 'Seqno'
	dst = ssz.MarshalUint64(dst, uint64(s.Seqno))

	// Field (6) 'PublicKey'
	dst = append(dst, s.PublicKey[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SmartContract object
func (s *SmartContract) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 158 {
		return ssz.ErrSize
	}

	// Field (0) 'Address'
	copy(s.Address[:], buf[0:20])

	// Field (1) 'Initialised'
	s.Initialised = ssz.UnmarshalBool(buf[20:21])

	// Field (2) 'Balance'
	if err = s.Balance.UnmarshalSSZ(buf[21:53]); err != nil {
		return err
	}

	// Field (3) 'StorageRoot'
	copy(s.StorageRoot[:], buf[53:85])

	// Field (4) 'CodeHash'
	copy(s.CodeHash[:], buf[85:117])

	// Field (5) 'Seqno'
	s.Seqno = Seqno(ssz.UnmarshallUint64(buf[117:125]))

	// Field (6) 'PublicKey'
	copy(s.PublicKey[:], buf[125:158])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SmartContract object
func (s *SmartContract) SizeSSZ() (size int) {
	size = 158
	return
}

// HashTreeRoot ssz hashes the SmartContract object
func (s *SmartContract) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SmartContract object with a hasher
func (s *SmartContract) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(s.Address[:])

	// Field (1) 'Initialised'
	hh.PutBool(s.Initialised)

	// Field (2) 'Balance'
	if err = s.Balance.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'StorageRoot'
	hh.PutBytes(s.StorageRoot[:])

	// Field (4) 'CodeHash'
	hh.PutBytes(s.CodeHash[:])

	// Field (5) 'Seqno'
	hh.PutUint64(uint64(s.Seqno))

	// Field (6) 'PublicKey'
	hh.PutBytes(s.PublicKey[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SmartContract object
func (s *SmartContract) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
