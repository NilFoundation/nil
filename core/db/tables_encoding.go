// Code generated by fastssz. DO NOT EDIT.
// Hash: 0c8347b1fc644b9581bb7b6d015cdf43368b32e969340a1ce4585b0f54877ce0
// Version: 0.1.3
package db

import (
	ssz "github.com/NilFoundation/fastssz"
	"github.com/NilFoundation/nil/core/types"
)

// MarshalSSZ ssz marshals the BlockHashAndMessageIndex object
func (b *BlockHashAndMessageIndex) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlockHashAndMessageIndex object to a target array
func (b *BlockHashAndMessageIndex) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockHash'
	dst = append(dst, b.BlockHash[:]...)

	// Field (1) 'MessageIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.MessageIndex))

	// Field (2) 'Outgoing'
	dst = ssz.MarshalBool(dst, b.Outgoing)

	return
}

// UnmarshalSSZ ssz unmarshals the BlockHashAndMessageIndex object
func (b *BlockHashAndMessageIndex) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 41 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockHash'
	copy(b.BlockHash[:], buf[0:32])

	// Field (1) 'MessageIndex'
	b.MessageIndex = types.MessageIndex(ssz.UnmarshallUint64(buf[32:40]))

	// Field (2) 'Outgoing'
	b.Outgoing = ssz.UnmarshalBool(buf[40:41])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockHashAndMessageIndex object
func (b *BlockHashAndMessageIndex) SizeSSZ() (size int) {
	size = 41
	return
}

// HashTreeRoot ssz hashes the BlockHashAndMessageIndex object
func (b *BlockHashAndMessageIndex) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlockHashAndMessageIndex object with a hasher
func (b *BlockHashAndMessageIndex) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockHash'
	hh.PutBytes(b.BlockHash[:])

	// Field (1) 'MessageIndex'
	hh.PutUint64(uint64(b.MessageIndex))

	// Field (2) 'Outgoing'
	hh.PutBool(b.Outgoing)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BlockHashAndMessageIndex object
func (b *BlockHashAndMessageIndex) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
