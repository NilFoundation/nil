// Code generated by fastssz. DO NOT EDIT.
// Hash: 7b2f291c62cf3a0fa21a9afa1b0e8ed7da3274639e2ae093adfa8be44be7cfdf
// Version: 0.1.3
package mpt

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the LeafNode object
func (l *LeafNode) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LeafNode object to a target array
func (l *LeafNode) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'NodePath'
	dst = ssz.WriteOffset(dst, offset)
	offset += l.NodePath.SizeSSZ()

	// Offset (1) 'LeafData'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'NodePath'
	if dst, err = l.NodePath.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'LeafData'
	if size := len(l.LeafData); size > 1000 {
		err = ssz.ErrBytesLengthFn("LeafNode.LeafData", size, 1000)
		return
	}
	dst = append(dst, l.LeafData...)

	return
}

// UnmarshalSSZ ssz unmarshals the LeafNode object
func (l *LeafNode) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'NodePath'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'LeafData'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'NodePath'
	{
		buf = tail[o0:o1]
		if err = l.NodePath.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'LeafData'
	{
		buf = tail[o1:]
		if len(buf) > 1000 {
			return ssz.ErrBytesLength
		}
		if cap(l.LeafData) == 0 {
			l.LeafData = make([]byte, 0, len(buf))
		}
		l.LeafData = append(l.LeafData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LeafNode object
func (l *LeafNode) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'NodePath'
	size += l.NodePath.SizeSSZ()

	// Field (1) 'LeafData'
	size += len(l.LeafData)

	return
}

// HashTreeRoot ssz hashes the LeafNode object
func (l *LeafNode) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LeafNode object with a hasher
func (l *LeafNode) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'NodePath'
	if err = l.NodePath.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'LeafData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(l.LeafData))
		if byteLen > 1000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(l.LeafData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1000+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LeafNode object
func (l *LeafNode) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the ExtensionNode object
func (e *ExtensionNode) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExtensionNode object to a target array
func (e *ExtensionNode) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'NodePath'
	dst = ssz.WriteOffset(dst, offset)
	offset += e.NodePath.SizeSSZ()

	// Offset (1) 'NextRef'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'NodePath'
	if dst, err = e.NodePath.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'NextRef'
	if size := len(e.NextRef); size > 1000 {
		err = ssz.ErrBytesLengthFn("ExtensionNode.NextRef", size, 1000)
		return
	}
	dst = append(dst, e.NextRef...)

	return
}

// UnmarshalSSZ ssz unmarshals the ExtensionNode object
func (e *ExtensionNode) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'NodePath'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'NextRef'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'NodePath'
	{
		buf = tail[o0:o1]
		if err = e.NodePath.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'NextRef'
	{
		buf = tail[o1:]
		if len(buf) > 1000 {
			return ssz.ErrBytesLength
		}
		if cap(e.NextRef) == 0 {
			e.NextRef = make([]byte, 0, len(buf))
		}
		e.NextRef = append(e.NextRef, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExtensionNode object
func (e *ExtensionNode) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'NodePath'
	size += e.NodePath.SizeSSZ()

	// Field (1) 'NextRef'
	size += len(e.NextRef)

	return
}

// HashTreeRoot ssz hashes the ExtensionNode object
func (e *ExtensionNode) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExtensionNode object with a hasher
func (e *ExtensionNode) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'NodePath'
	if err = e.NodePath.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'NextRef'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.NextRef))
		if byteLen > 1000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.NextRef)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1000+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExtensionNode object
func (e *ExtensionNode) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the BranchNode object
func (b *BranchNode) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BranchNode object to a target array
func (b *BranchNode) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Branches'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.Branches); ii++ {
		offset += 4
		offset += len(b.Branches[ii])
	}

	// Offset (1) 'Value'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Branches'
	if size := len(b.Branches); size > 16 {
		err = ssz.ErrListTooBigFn("BranchNode.Branches", size, 16)
		return
	}
	{
		offset = 4 * len(b.Branches)
		for ii := 0; ii < len(b.Branches); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(b.Branches[ii])
		}
	}
	for ii := 0; ii < len(b.Branches); ii++ {
		if size := len(b.Branches[ii]); size > 1000 {
			err = ssz.ErrBytesLengthFn("BranchNode.Branches[ii]", size, 1000)
			return
		}
		dst = append(dst, b.Branches[ii]...)
	}

	// Field (1) 'Value'
	if size := len(b.Value); size > 1000 {
		err = ssz.ErrBytesLengthFn("BranchNode.Value", size, 1000)
		return
	}
	dst = append(dst, b.Value...)

	return
}

// UnmarshalSSZ ssz unmarshals the BranchNode object
func (b *BranchNode) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Branches'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Value'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'Branches'
	{
		buf = tail[o0:o1]
		num, err := ssz.DecodeDynamicLength(buf, 16)
		if err != nil {
			return err
		}

		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1000 {
				return ssz.ErrBytesLength
			}
			if cap(b.Branches[indx]) == 0 {
				b.Branches[indx] = make([]byte, 0, len(buf))
			}
			b.Branches[indx] = append(b.Branches[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (1) 'Value'
	{
		buf = tail[o1:]
		if len(buf) > 1000 {
			return ssz.ErrBytesLength
		}
		if cap(b.Value) == 0 {
			b.Value = make([]byte, 0, len(buf))
		}
		b.Value = append(b.Value, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BranchNode object
func (b *BranchNode) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Branches'
	for ii := 0; ii < len(b.Branches); ii++ {
		size += 4
		size += len(b.Branches[ii])
	}

	// Field (1) 'Value'
	size += len(b.Value)

	return
}

// HashTreeRoot ssz hashes the BranchNode object
func (b *BranchNode) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BranchNode object with a hasher
func (b *BranchNode) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Branches'
	{
		subIndx := hh.Index()
		num := uint64(len(b.Branches))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.Branches {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1000 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1000+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	// Field (1) 'Value'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(b.Value))
		if byteLen > 1000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(b.Value)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1000+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BranchNode object
func (b *BranchNode) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
